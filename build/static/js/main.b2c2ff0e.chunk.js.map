{"version":3,"sources":["store/actions/actionTypes.js","Components/Map/Map.js","App.js","store/actions/mapAction.js","Components/Map/Wrapper.js","store/reducers/mapReducer.js","store/reducers/rootReducer.js","index.js"],"names":["GOOGLE_API","GoogleMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadGoogleData","map","googleApi","setState","loaded","state","center","lat","lng","_this2","setTimeout","google","maps","Map","document","getElementById","zoom","mapTypeId","gestureHandling","react_default","a","createElement","id","React","Component","connect","SortableItem","SortableList","dispatch","type","Wrapper","mdbreact_esm","size","title","children","App","isOpen","fromLatLng","waypoints","polyline","markers","addresses","editMode","valueFrom","routes","tempAddress","latLng","error","addressesCopy","setPoint","address","setCenter","length","setMap","push","marker","Marker","position","draggable","animation","Animation","DROP","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","infowindow","InfoWindow","content","addListener","open","event","getNewAddress","getPosition","setContent","pos","localPosition","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","index","err","return","Geocoder","geocode","results","status","GeocoderStatus","OK","formatted_address","localLatLng","geometry","location","console","log","recreatePoly","deleteMarker","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref6","_ref5","i","item","splice","getPath","removeAt","deleteAllMarkers","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","createRoute","request","from","to","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","setOptions","suppressMarkers","waypts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","stopover","origin","LatLng","destination","optimizeWaypoints","travelMode","DirectionsTravelMode","DRIVING","route","response","window","DirectionsStatus","setDirections","mapWaypoints","deleteRoute","setPointAsCenter","addListItem","keys","key","className","onClick","bind","hover","handleSelect","geocodeByAddress","then","getLatLng","catch","onSortEnd","_ref7","oldIndex","newIndex","_ref8","arrayMove","listOfRoutes","fromAddress","toAddress","SortableElement","_ref9","SortableContainer","_ref10","items","concat","autocomplete","itemRoute","dist_default","onChange","onSelect","_ref11","getInputProps","suggestions","getSuggestionItemProps","loading","assign","hint","name","placeholder","role","suggestion","active","style","backgroundColor","cursor","description","color","dark","expand","fluid","marginTop","around","Map_Wrapper","htmlFor","initialState","combineReducers","arguments","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","application","es","react_router_dom","src_App_0","ReactDOM","render"],"mappings":"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","file":"static/js/main.b2c2ff0e.chunk.js","sourcesContent":["export const GOOGLE_API = 'GOOGLE_API'","import React from 'react';\r\nimport './map.css'\r\nimport {connect} from \"react-redux\";\r\nimport {googleApi} from '../../store/actions/mapAction'\r\n\r\n/*global google*/\r\n\r\nclass GoogleMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            center: {lat: 46.482886, lng: 30.735430},\r\n            map: '',\r\n            loaded: false\r\n        };\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true,\r\n            map: map\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n\r\n            let map = new google.maps.Map(document.getElementById('map'), {\r\n                center: this.state.center,\r\n                zoom: 5,\r\n                mapTypeId: 'roadmap',\r\n                gestureHandling: 'greedy'\r\n            });\r\n\r\n            if (this.state.loaded === false) {\r\n                this.loadGoogleData(map);\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true,\r\n            map: map\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        googleApi: map => dispatch(googleApi(map))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(GoogleMap);\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport GoogleMap from './Components/Map/Map'\nimport {\n    MDBNavbar,\n    MDBNavbarBrand,\n    MDBBtn,\n    MDBRow,\n    MDBContainer,\n    MDBInput,\n    MDBCardText,\n    MDBListGroup,\n    MDBListGroupItem\n} from \"mdbreact\";\nimport {connect} from \"react-redux\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport Wrapper from \"./Components/Map/Wrapper\";\n\n/* global google */\n\n\nlet SortableItem, SortableList;\n\nclass App extends Component {\n    state = {\n        isOpen: false,\n        fromLatLng: '',\n        waypoints: [],\n        polyline: [],\n        markers: [],\n        addresses: [],\n        editMode: true,\n        valueFrom: '',\n        routes: [],\n        tempAddress: '',\n        latLng: '',\n        error: false,\n        addressesCopy: []\n    };\n\n    componentDidUpdate() {\n        SortableItem = SortableElement(({value}) =>\n\n            <div\n                className=\"list-item-box\">\n                <MDBListGroupItem\n                    hover\n                >{value}\n                </MDBListGroupItem>\n            </div>);\n\n        SortableList = SortableContainer(({items}) => {\n            return (\n                <div>\n                    {items.map((value, index) => (\n                        <SortableItem key={`item-${index}`} index={index} value={value}/>\n                    ))}\n                </div>\n            );\n        });\n    }\n\n    setPoint = (latLng, address) => {\n        this.props.google.setCenter(latLng)\n        let waypoints = this.state.waypoints;\n        let polyline = this.state.polyline;\n        let markers = this.state.markers;\n        if (waypoints.length > 1) {\n            polyline.setMap(null);\n        }\n        waypoints.push(latLng);\n\n        let marker = new google.maps.Marker({\n            position: latLng,\n            map: this.props.google,\n            draggable: true,\n            animation: google.maps.Animation.DROP\n        });\n        markers.push(marker);\n        polyline = new google.maps.Polyline({\n            path: waypoints,\n            geodesic: true,\n            strokeColor: '#FF0000',\n            strokeOpacity: 1.0,\n            strokeWeight: 2\n        });\n        polyline.setMap(this.props.google);\n        this.setState({\n            waypoints,\n            polyline,\n            markers\n        })\n        let infowindow = new google.maps.InfoWindow({\n            content: address\n        });\n        marker.addListener('click', () => {\n            infowindow.open(this.props.google, marker);\n        });\n        google.maps.event.addListener(marker, 'dragend', () => {\n            this.getNewAddress(marker, marker.getPosition());\n            setTimeout(() => {\n                infowindow.setContent(this.state.tempAddress);\n            }, 500);\n        });\n\n    }\n    getNewAddress = (marker, pos) => {\n        let polyline = this.state.polyline;\n        polyline.setMap(null);\n        this.setState({\n            polyline\n        })\n        let markers = this.state.markers;\n        let waypoints = this.state.waypoints;\n        let addresses = this.state.addresses;\n        let localPosition;\n        for (const [index, value] of markers.entries()) {\n            if (marker === value) {\n                localPosition = index;\n            }\n        }\n        let geocoder = new google.maps.Geocoder();\n        geocoder.geocode({latLng: pos}, (results, status) => {\n                if (status === google.maps.GeocoderStatus.OK) {\n                    addresses[localPosition] = results[0].formatted_address;\n                    let localLatLng = {\n                        lat: results[0].geometry.location.lat(),\n                        lng: results[0].geometry.location.lng()\n                    };\n                    markers[localPosition] = marker;\n                    waypoints[localPosition] = localLatLng;\n                    this.setState({\n                        markers,\n                        addresses,\n                        waypoints,\n                        tempAddress: results[0].formatted_address\n                    })\n                } else {\n                    console.log('Error: ', status);\n                }\n            }\n        );\n\n        setTimeout(() => {\n            this.recreatePoly();\n        }, 500);\n    }\n    deleteMarker = (event) => {\n        let markers = this.state.markers;\n        let marker = markers[event];\n        let addresses = this.state.addresses;\n        let waypoints = this.state.waypoints;\n        for (const [i, item] of markers.entries()) {\n            if (item === marker) {\n                item.setMap(null);\n                markers.splice(i, 1);\n                waypoints.splice(i, 1);\n                addresses.splice(i, 1);\n                this.state.polyline.getPath().removeAt(i);\n\n                this.setState({\n                    markers,\n                    waypoints,\n                    addresses\n                })\n            }\n        }\n    }\n    deleteAllMarkers = () => {\n        this.state.polyline.setMap(null);\n        let markers = this.state.markers;\n        let addresses = this.state.addresses;\n        for (const item of markers) {\n            item.setMap(null);\n        }\n        markers = [];\n        addresses = [];\n        this.setState({\n            markers,\n            addresses\n        })\n    }\n    createRoute = () => {\n        if (this.state.waypoints.length < 2) {\n            return;\n        }\n        let address = this.state.addresses;\n        let addressesCopy = this.state.addressesCopy;\n        addressesCopy.push({from: address[0], to: address[address.length - 1]});\n        this.setState({\n            addressesCopy\n        })\n        this.deleteAllMarkers();\n        let request;\n        let directionsService = new google.maps.DirectionsService();\n        let directionsDisplay = new google.maps.DirectionsRenderer();\n\n        directionsDisplay.setOptions({suppressMarkers: false});\n\n        directionsDisplay.setMap(this.props.google);\n\n        if (this.state.waypoints.length > 2) {\n            let waypts = this.state.waypoints;\n            let waypoints = [];\n            for (let item of waypts) {\n                waypoints.push({location: item, stopover: true});\n            }\n            waypoints.splice(0, 1);\n            waypoints.splice(waypoints.length - 1, 1);\n            request = {\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\n                waypoints: waypoints,\n                optimizeWaypoints: false,\n                travelMode: google.maps.DirectionsTravelMode.DRIVING\n            };\n        } else {\n            request = {\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\n                optimizeWaypoints: false,\n                travelMode: google.maps.DirectionsTravelMode.DRIVING\n            };\n        }\n        directionsService.route(request, function (response, status) {\n            if (status === window.google.maps.DirectionsStatus.OK) {\n                directionsDisplay.setDirections(response);\n            }\n        });\n        directionsDisplay.setMap(this.props.google);\n        let mapWaypoints = this.state.waypoints;\n        let routes = this.state.routes;\n        mapWaypoints = [];\n        routes.push(directionsDisplay);\n        this.setState({\n            waypoints: mapWaypoints,\n            routes\n        })\n\n    }\n    deleteRoute = (event) => {\n        let addressesCopy = this.state.addressesCopy;\n        let routes = this.state.routes;\n        addressesCopy.splice(event, 1);\n        routes[event].setMap(null);\n        routes.splice(event, 1);\n        this.setState({\n            routes,\n            addressesCopy\n        })\n    }\n    setPointAsCenter = (event) => {\n        let latLng = this.state.markers[event];\n        latLng = {lat: latLng.getPosition().lat(), lng: latLng.getPosition().lng()}\n        this.props.google.setCenter(latLng)\n    }\n    recreatePoly = () => {\n        let waypoints = this.state.waypoints;\n        let polyline = this.state.polyline;\n        polyline = new google.maps.Polyline({\n            path: waypoints,\n            geodesic: true,\n            strokeColor: '#FF0000',\n            strokeOpacity: 1.0,\n            strokeWeight: 2\n        });\n        polyline.setMap(this.props.google);\n        this.setState({\n            waypoints,\n            polyline\n        })\n    }\n    addListItem = () => {\n        return Object.keys(this.state.addresses).map((pos, index) => {\n            let address = this.state.addresses[pos];\n            return (\n                <div key={'item-' + index} className=\"list-item-box\">\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\n                    </div>\n                    <MDBListGroupItem\n                        onClick={this.setPointAsCenter.bind(null, pos)}\n                        hover\n                        key={index}\n                    >{address}\n                    </MDBListGroupItem>\n                    <div className=\"delete-item-box\" key={'box-' + index}\n                         onClick={this.deleteMarker.bind(null, pos)}>\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    handleSelect = address => {\n        let addresses = this.state.addresses;\n        geocodeByAddress(address)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => {\n                addresses.push(address);\n                this.setState({\n                    valueFrom: '',\n                    latLng,\n                    addresses\n                })\n            })\n            .catch(() => {\n                this.setState({\n                    error: !this.state.error\n                })\n            });\n        setTimeout(() => {\n            if (!this.state.error) {\n                this.setPoint(this.state.latLng, address)\n            } else {\n                this.setState({\n                    error: !this.state.error\n                })\n            }\n        }, 1000)\n    };\n    onSortEnd = ({oldIndex, newIndex}) => {\n        let polyline = this.state.polyline;\n        polyline.setMap(null);\n        this.setState(({addresses, waypoints, markers}) => ({\n            addresses: arrayMove(addresses, oldIndex, newIndex),\n            waypoints: arrayMove(waypoints, oldIndex, newIndex),\n            markers: arrayMove(markers, oldIndex, newIndex),\n            polyline\n        }));\n        this.recreatePoly();\n    };\n    listOfRoutes = () => {\n        return Object.keys(this.state.routes).map((pos, index) => {\n            let address = this.state.addressesCopy[pos];\n            let fromAddress = address.from;\n            let toAddress = address.to;\n            return (\n                <div key={'item-' + index} className=\"list-item-box\">\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\n                    </div>\n                    <MDBListGroupItem\n                        hover\n                        key={index}\n                    >From: {fromAddress} To: {toAddress}\n                    </MDBListGroupItem>\n                    <div className=\"delete-item-box\" key={'box-' + index}\n                         onClick={this.deleteRoute.bind(null, pos)}>\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\n                    </div>\n                </div>\n            );\n        });\n\n    }\n\n    render() {\n        let item, autocomplete, itemRoute;\n\n        if (this.state.editMode) {\n            item = this.addListItem();\n        } else {\n            item =\n                (<SortableList items={this.state.addresses} onSortEnd={this.onSortEnd}/>);\n        }\n        itemRoute = this.listOfRoutes();\n        autocomplete = (<PlacesAutocomplete\n            value={this.state.valueFrom}\n            onChange={valueFrom => this.setState({valueFrom})}\n            onSelect={this.handleSelect}\n        >\n            {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\n                <div>\n                    <MDBInput\n                        hint=\"Add waypoint\"\n                        id=\"from_value\"\n                        name=\"valueFrom\"\n                        {...getInputProps({\n                            placeholder: 'Search Places ...',\n                            className: 'location-search-input',\n                        })}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                        {loading && <div className=\"spinner-grow text-info\" role=\"status\"></div>}\n                        {suggestions.map(suggestion => {\n                            const className = suggestion.active\n                                ? 'suggestion-item--active'\n                                : 'suggestion-item';\n                            const style = suggestion.active\n                                ? {backgroundColor: '#fafafa', cursor: 'pointer'}\n                                : {backgroundColor: '#ffffff', cursor: 'pointer'};\n                            return (\n                                <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                        className,\n                                        style,\n                                    })}\n                                >\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n        </PlacesAutocomplete>)\n        return (\n            <div className=\"App\">\n                {!this.props.google ? <div className=\"preloader\">\n                    <div className=\"spinner-grow text-info\" role=\"status\"></div>\n                </div> : false}\n                <MDBNavbar color=\"indigo\" dark expand=\"md\">\n                    <MDBNavbarBrand>\n                        <strong className=\"white-text\">RouteFinder</strong>\n                    </MDBNavbarBrand>\n                </MDBNavbar>\n                <MDBContainer fluid style={{marginTop: '20px'}}>\n                    <MDBRow around>\n                        <Wrapper title=\"Settings\" size=\"6\">\n                            <MDBCardText>\n                                You can choose variant with arrows and press Enter to add a waypoint.\n                            </MDBCardText>\n                            {this.props.google ? autocomplete : false}\n                            <div className=\"options\">\n                                <MDBBtn size=\"sm\" onClick={this.createRoute}>Create Route</MDBBtn>\n                                <input type=\"checkbox\"\n                                       id=\"id-name--1\"\n                                       name=\"edit-mode\"\n                                       className=\"switch-input\"\n                                       onChange={() => this.setState({editMode: !this.state.editMode})}\n                                />\n                                <label htmlFor=\"id-name--1\" className=\"switch-label\">Edit mode <span\n                                    className=\"toggle--on\">On</span><span\n                                    className=\"toggle--off\">Off</span></label>\n                            </div>\n                            <MDBListGroup style={{marginTop: '25px'}}>\n                                {this.state.addresses.length >= 1 ? item : false}\n                            </MDBListGroup>\n                        </Wrapper>\n                        <Wrapper title=\"Map\" size=\"6\">\n                            <GoogleMap/>\n                            <MDBListGroup style={{marginTop: '25px'}}>\n                                {this.state.routes.length > 0 ? itemRoute : false}\n                            </MDBListGroup>\n                        </Wrapper>\n                    </MDBRow>\n                </MDBContainer>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        google: state.map.google\n    };\n}\n\nexport default connect(\n    mapStateToProps\n)(App);\n","import {\r\n    GOOGLE_API\r\n} from \"./actionTypes\";\r\n\r\nexport function googleApi(google) {\r\n    return {\r\n        type: GOOGLE_API,\r\n        google\r\n    };\r\n}","import {MDBCard, MDBCardBody, MDBCardTitle, MDBCol} from \"mdbreact\";\r\nimport React, {Component} from \"react\";\r\n\r\nclass Wrapper extends Component {\r\n    render() {\r\n        return (\r\n            <MDBCol size={this.props.size}>\r\n                <MDBCard>\r\n                    <MDBCardBody>\r\n                        <MDBCardTitle>{this.props.title}</MDBCardTitle>\r\n                        {this.props.children}\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            </MDBCol>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import {\r\n    GOOGLE_API\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    google: ''\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GOOGLE_API:\r\n            return {\r\n                ...state,\r\n                google: action.google\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport mapReducer from './mapReducer'\r\n\r\nexport default combineReducers({\r\n    map: mapReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware(thunk)\n    )\n);\nconst application = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\nReactDOM.render(application, document.getElementById('root'));\n"],"sourceRoot":""}