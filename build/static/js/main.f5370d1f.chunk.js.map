{"version":3,"sources":["store/actions/actionTypes.js","Components/Map/Map.js","App.js","store/actions/mapAction.js","store/reducers/mapReducer.js","store/reducers/rootReducer.js","index.js"],"names":["GOOGLE_API","FROM_WAYPOINT","TO_WAYPOINT","ADD_WAYPOINT","GoogleMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadGoogleData","map","googleApi","setState","loaded","state","center","lat","lng","_this2","setTimeout","google","maps","Map","document","getElementById","zoom","mapTypeId","react_default","a","createElement","id","React","Component","connect","SortableItem","SortableList","dispatch","type","App","isOpen","fromLatLng","waypoints","polyline","markers","addresses","editMode","valueFrom","routes","tempAddress","latLng","error","addressesCopy","setPoint","address","setCenter","length","setMap","push","marker","Marker","position","draggable","animation","Animation","DROP","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","infowindow","InfoWindow","content","addListener","open","event","getNewAddress","getPosition","setContent","pos","localPosition","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","index","err","return","Geocoder","geocode","results","status","GeocoderStatus","OK","formatted_address","localLatLng","geometry","location","console","log","recreatePoly","deleteMarker","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref6","_ref5","i","item","splice","getPath","removeAt","deleteAllMarkers","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","createRoute","request","from","to","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","setOptions","suppressMarkers","waypts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","stopover","origin","LatLng","destination","optimizeWaypoints","travelMode","DirectionsTravelMode","DRIVING","route","response","window","DirectionsStatus","setDirections","mapWaypoints","deleteRoute","setPointAsCenter","addListItem","keys","key","className","mdbreact_esm","onClick","bind","hover","handleSelect","geocodeByAddress","then","getLatLng","catch","onSortEnd","_ref7","oldIndex","newIndex","_ref8","arrayMove","listOfRoutes","fromAddress","toAddress","SortableElement","_ref9","SortableContainer","_ref10","items","concat","autocomplete","itemRoute","dist_default","onChange","onSelect","_ref11","getInputProps","suggestions","getSuggestionItemProps","loading","assign","hint","name","placeholder","role","suggestion","active","style","backgroundColor","cursor","description","color","dark","expand","fluid","marginTop","around","display","flexWrap","size","htmlFor","fromValue","fromWaypoint","waypoint","initialState","toWaypoint","addWaypoint","combineReducers","arguments","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","application","es","react_router_dom","src_App_0","ReactDOM","render"],"mappings":"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","file":"static/js/main.f5370d1f.chunk.js","sourcesContent":["export const GOOGLE_API = 'GOOGLE_API'\r\n\r\nexport const FROM_WAYPOINT = 'FROM_WAYPOINT'\r\nexport const TO_WAYPOINT = 'TO_WAYPOINT'\r\nexport const ADD_WAYPOINT = 'ADD_WAYPOINT'","import React from 'react';\r\nimport './map.css'\r\nimport {connect} from \"react-redux\";\r\nimport {googleApi} from '../../store/actions/mapAction'\r\n/*global google*/\r\n\r\nclass GoogleMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            center: {lat: 46.482886, lng: 30.735430},\r\n            map: '',\r\n            loaded: false\r\n        };\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true,\r\n            map: map\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() =>{\r\n\r\n        let map = new google.maps.Map(document.getElementById('map'), {\r\n            center: this.state.center,\r\n            zoom: 5,\r\n            mapTypeId: 'roadmap',\r\n        });\r\n\r\n        if (this.state.loaded === false) {\r\n            this.loadGoogleData(map);\r\n        }\r\n        },500)\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true,\r\n            map: map\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        googleApi: map => dispatch(googleApi(map))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(GoogleMap);\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport GoogleMap from './Components/Map/Map'\nimport {\n    MDBNavbar,\n    MDBNavbarBrand,\n    MDBBtn,\n    MDBRow,\n    MDBContainer,\n    MDBInput,\n    MDBCard,\n    MDBCardBody,\n    MDBCardTitle,\n    MDBCardText,\n    MDBCol,\n    MDBListGroup,\n    MDBListGroupItem\n} from \"mdbreact\";\nimport {fromWaypoint} from \"./store/actions/mapAction\";\nimport {connect} from \"react-redux\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\n\n/* global google */\n\nlet SortableItem, SortableList;\n\nclass App extends Component {\n    state = {\n        isOpen: false,\n        fromLatLng: '',\n        waypoints: [],\n        polyline: [],\n        markers: [],\n        addresses: [],\n        editMode: true,\n        valueFrom: '',\n        routes: [],\n        tempAddress: '',\n        latLng: '',\n        error: false,\n        addressesCopy: []\n    };\n\n    componentDidUpdate() {\n        SortableItem = SortableElement(({value}) =>\n            <div\n                className=\"list-item-box\">\n                <MDBListGroupItem\n                    hover\n                >{value}\n                </MDBListGroupItem>\n            </div>);\n\n        SortableList = SortableContainer(({items}) => {\n            return (\n                <div>\n                    {items.map((value, index) => (\n                        <SortableItem key={`item-${index}`} index={index} value={value}/>\n                    ))}\n                </div>\n            );\n        });\n    }\n\n    setPoint = (latLng, address) => {\n        this.props.google.setCenter(latLng)\n        let waypoints = this.state.waypoints;\n        let polyline = this.state.polyline;\n        let markers = this.state.markers;\n        if (waypoints.length > 1) {\n            polyline.setMap(null);\n        }\n        waypoints.push(latLng);\n\n        let marker = new google.maps.Marker({\n            position: latLng,\n            map: this.props.google,\n            draggable: true,\n            animation: google.maps.Animation.DROP\n        });\n        markers.push(marker);\n        polyline = new google.maps.Polyline({\n            path: waypoints,\n            geodesic: true,\n            strokeColor: '#FF0000',\n            strokeOpacity: 1.0,\n            strokeWeight: 2\n        });\n        polyline.setMap(this.props.google);\n        this.setState({\n            waypoints,\n            polyline,\n            markers\n        })\n        let infowindow = new google.maps.InfoWindow({\n            content: address\n        });\n        marker.addListener('click', () => {\n            infowindow.open(this.props.google, marker);\n        });\n        google.maps.event.addListener(marker, 'dragend', () => {\n            this.getNewAddress(marker, marker.getPosition());\n            setTimeout(() => {\n                infowindow.setContent(this.state.tempAddress);\n            }, 500);\n        });\n\n    }\n    getNewAddress = (marker, pos) => {\n        let polyline = this.state.polyline;\n        polyline.setMap(null);\n        this.setState({\n            polyline\n        })\n        let markers = this.state.markers;\n        let waypoints = this.state.waypoints;\n        let addresses = this.state.addresses;\n        let localPosition;\n        for (const [index, value] of markers.entries()) {\n            if (marker === value) {\n                localPosition = index;\n            }\n        }\n        let geocoder = new google.maps.Geocoder();\n        geocoder.geocode({latLng: pos}, (results, status) => {\n                if (status === google.maps.GeocoderStatus.OK) {\n                    addresses[localPosition] = results[0].formatted_address;\n                    let localLatLng = {\n                        lat: results[0].geometry.location.lat(),\n                        lng: results[0].geometry.location.lng()\n                    };\n                    markers[localPosition] = marker;\n                    waypoints[localPosition] = localLatLng;\n                    this.setState({\n                        markers,\n                        addresses,\n                        waypoints,\n                        tempAddress: results[0].formatted_address\n                    })\n                } else {\n                    console.log('Error: ', status);\n                }\n            }\n        );\n\n        setTimeout(() => {\n            this.recreatePoly();\n        }, 500);\n    }\n    deleteMarker = (event) => {\n        let markers = this.state.markers;\n        let marker = markers[event];\n        let addresses = this.state.addresses;\n        let waypoints = this.state.waypoints;\n        for (const [i, item] of markers.entries()) {\n            if (item === marker) {\n                item.setMap(null);\n                markers.splice(i, 1);\n                waypoints.splice(i, 1);\n                addresses.splice(i, 1);\n                this.state.polyline.getPath().removeAt(i);\n\n                this.setState({\n                    markers,\n                    waypoints,\n                    addresses\n                })\n            }\n        }\n    }\n    deleteAllMarkers = () => {\n        this.state.polyline.setMap(null);\n        let markers = this.state.markers;\n        let addresses = this.state.addresses;\n        for (const item of markers) {\n            item.setMap(null);\n        }\n        markers = [];\n        addresses = [];\n        this.setState({\n            markers,\n            addresses\n        })\n    }\n    createRoute = () => {\n        if (this.state.waypoints.length < 2) {\n            return;\n        }\n        let address = this.state.addresses;\n        let addressesCopy = this.state.addressesCopy;\n        addressesCopy.push({from: address[0], to: address[address.length - 1]});\n        this.setState({\n            addressesCopy\n        })\n        this.deleteAllMarkers();\n        let request;\n        let directionsService = new google.maps.DirectionsService();\n        let directionsDisplay = new google.maps.DirectionsRenderer();\n\n        directionsDisplay.setOptions({suppressMarkers: false});\n\n        directionsDisplay.setMap(this.props.google);\n\n        if (this.state.waypoints.length > 2) {\n            let waypts = this.state.waypoints;\n            let waypoints = [];\n            for (let item of waypts) {\n                waypoints.push({location: item, stopover: true});\n            }\n            waypoints.splice(0, 1);\n            waypoints.splice(waypoints.length - 1, 1);\n            request = {\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\n                waypoints: waypoints,\n                optimizeWaypoints: false,\n                travelMode: google.maps.DirectionsTravelMode.DRIVING\n            };\n        } else {\n            request = {\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\n                optimizeWaypoints: false,\n                travelMode: google.maps.DirectionsTravelMode.DRIVING\n            };\n        }\n        directionsService.route(request, function (response, status) {\n            if (status === window.google.maps.DirectionsStatus.OK) {\n                directionsDisplay.setDirections(response);\n            }\n        });\n        directionsDisplay.setMap(this.props.google);\n        let mapWaypoints = this.state.waypoints;\n        let routes = this.state.routes;\n        mapWaypoints = [];\n        routes.push(directionsDisplay);\n        this.setState({\n            waypoints: mapWaypoints,\n            routes\n        })\n\n    }\n    deleteRoute = (event) => {\n        let addressesCopy = this.state.addressesCopy;\n        let routes = this.state.routes;\n        addressesCopy.splice(event, 1);\n        routes[event].setMap(null);\n        routes.splice(event, 1);\n        this.setState({\n            routes,\n            addressesCopy\n        })\n    }\n    setPointAsCenter = (event) => {\n        let latLng = this.state.markers[event];\n        latLng = {lat: latLng.getPosition().lat(), lng: latLng.getPosition().lng()}\n        this.props.google.setCenter(latLng)\n    }\n    recreatePoly = () => {\n        let waypoints = this.state.waypoints;\n        let polyline = this.state.polyline;\n        polyline = new google.maps.Polyline({\n            path: waypoints,\n            geodesic: true,\n            strokeColor: '#FF0000',\n            strokeOpacity: 1.0,\n            strokeWeight: 2\n        });\n        polyline.setMap(this.props.google);\n        this.setState({\n            waypoints,\n            polyline\n        })\n    }\n    addListItem = () => {\n        return Object.keys(this.state.addresses).map((pos, index) => {\n            let address = this.state.addresses[pos];\n            return (\n                <div key={'item-' + index} className=\"list-item-box\">\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\n                    </div>\n                    <MDBListGroupItem\n                        onClick={this.setPointAsCenter.bind(null, pos)}\n                        hover\n                        key={index}\n                    >{address}\n                    </MDBListGroupItem>\n                    <div className=\"delete-item-box\" key={'box-' + index} onClick={this.deleteMarker.bind(null, pos)}>\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    handleSelect = address => {\n        let addresses = this.state.addresses;\n        geocodeByAddress(address)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => {\n                addresses.push(address);\n                this.setState({\n                    valueFrom: '',\n                    latLng,\n                    addresses\n                })\n            })\n            .catch(() => {\n                this.setState({\n                    error: !this.state.error\n                })\n            });\n        setTimeout(() => {\n            if (!this.state.error) {\n                this.setPoint(this.state.latLng, address)\n            } else {\n                this.setState({\n                    error: !this.state.error\n                })\n            }\n        }, 1000)\n    };\n    onSortEnd = ({oldIndex, newIndex}) => {\n        let polyline = this.state.polyline;\n        polyline.setMap(null);\n        this.setState(({addresses, waypoints, markers}) => ({\n            addresses: arrayMove(addresses, oldIndex, newIndex),\n            waypoints: arrayMove(waypoints, oldIndex, newIndex),\n            markers: arrayMove(markers, oldIndex, newIndex),\n            polyline\n        }));\n        this.recreatePoly();\n    };\n    listOfRoutes = () => {\n        return Object.keys(this.state.routes).map((pos, index) => {\n            let address = this.state.addressesCopy[pos];\n            let fromAddress = address.from;\n            let toAddress = address.to;\n            return (\n                <div key={'item-' + index} className=\"list-item-box\">\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\n                    </div>\n                    <MDBListGroupItem\n                        hover\n                        key={index}\n                    >From: {fromAddress} To: {toAddress}\n                    </MDBListGroupItem>\n                    <div className=\"delete-item-box\" key={'box-' + index}\n                         onClick={this.deleteRoute.bind(null, pos)}>\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\n                    </div>\n                </div>\n            );\n        });\n\n    }\n\n    render() {\n        let item, autocomplete, itemRoute;\n\n        if (this.state.editMode) {\n            item = this.addListItem();\n        } else {\n            item =\n                (<SortableList items={this.state.addresses} onSortEnd={this.onSortEnd}/>);\n        }\n        itemRoute = this.listOfRoutes();\n        autocomplete = (<PlacesAutocomplete\n            value={this.state.valueFrom}\n            onChange={valueFrom => this.setState({valueFrom})}\n            onSelect={this.handleSelect}\n        >\n            {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\n                <div>\n                    <MDBInput\n                        hint=\"Add waypoint\"\n                        id=\"from_value\"\n                        name=\"valueFrom\"\n                        {...getInputProps({\n                            placeholder: 'Search Places ...',\n                            className: 'location-search-input',\n                        })}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                        {loading && <div className=\"spinner-grow text-info\" role=\"status\"></div>}\n                        {suggestions.map(suggestion => {\n                            const className = suggestion.active\n                                ? 'suggestion-item--active'\n                                : 'suggestion-item';\n                            const style = suggestion.active\n                                ? {backgroundColor: '#fafafa', cursor: 'pointer'}\n                                : {backgroundColor: '#ffffff', cursor: 'pointer'};\n                            return (\n                                <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                        className,\n                                        style,\n                                    })}\n                                >\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n        </PlacesAutocomplete>)\n        return (\n            <div className=\"App\">\n                {!this.props.google ? <div className=\"preloader\">\n                    <div className=\"spinner-grow text-info\" role=\"status\"></div>\n                </div> : false}\n                <MDBNavbar color=\"indigo\" dark expand=\"md\">\n                    <MDBNavbarBrand>\n                        <strong className=\"white-text\">RouteFinder</strong>\n                    </MDBNavbarBrand>\n                </MDBNavbar>\n                <MDBContainer fluid style={{marginTop: '20px'}}>\n                    <MDBRow around style={{display: 'flex', flexWrap: 'wrap'}}>\n                        <MDBCol size=\"4\">\n                            <MDBCard>\n                                <MDBCardBody className=\"scroll-card\">\n                                    <MDBCardTitle>Settings</MDBCardTitle>\n                                    <MDBCardText>\n                                        You can choose variant with arrows and press Enter to add a waypoint.\n                                    </MDBCardText>\n                                    {this.props.google ? autocomplete : false}\n                                    <div className=\"options\">\n                                        <MDBBtn size=\"sm\" onClick={this.createRoute}>Create Route</MDBBtn>\n                                        <input type=\"checkbox\"\n                                               id=\"id-name--1\"\n                                               name=\"edit-mode\"\n                                               className=\"switch-input\"\n                                               onChange={() => this.setState({editMode: !this.state.editMode})}\n                                        />\n                                        <label htmlFor=\"id-name--1\" className=\"switch-label\">Edit mode <span\n                                            className=\"toggle--on\">On</span><span\n                                            className=\"toggle--off\">Off</span></label>\n                                    </div>\n                                    <MDBListGroup style={{marginTop: '25px'}}>\n                                        {this.state.addresses.length >= 1 ? item : false}\n                                    </MDBListGroup>\n                                </MDBCardBody>\n                            </MDBCard>\n                        </MDBCol>\n                        <MDBCol size=\"8\">\n                            <MDBCard>\n                                <MDBCardBody>\n                                    <MDBCardTitle>Map</MDBCardTitle>\n                                    <GoogleMap/>\n                                    <MDBListGroup style={{marginTop: '25px'}}>\n                                        {this.state.routes.length > 0 ? itemRoute : false}\n                                    </MDBListGroup>\n                                </MDBCardBody>\n                            </MDBCard>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fromWaypoint: waypoint => dispatch(fromWaypoint(waypoint))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        google: state.map.google,\n        fromValue: state.map.fromWaypoint\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import {\r\n    GOOGLE_API,\r\n    FROM_WAYPOINT,\r\n    TO_WAYPOINT,\r\n    ADD_WAYPOINT\r\n} from \"./actionTypes\";\r\n\r\nexport function googleApi(google) {\r\n    return {\r\n        type: GOOGLE_API,\r\n        google\r\n    };\r\n}\r\nexport function fromWaypoint(waypoint) {\r\n    return{\r\n        type: FROM_WAYPOINT,\r\n        waypoint\r\n    }\r\n}\r\nexport function toWaypoint(waypoint) {\r\n    return{\r\n        type: TO_WAYPOINT,\r\n        waypoint\r\n    }\r\n}\r\nexport function addWaypoint(waypoint) {\r\n    return{\r\n        type: ADD_WAYPOINT,\r\n        waypoint\r\n    }\r\n}","import {\r\n    GOOGLE_API,\r\n    FROM_WAYPOINT,\r\n    TO_WAYPOINT,\r\n    ADD_WAYPOINT\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    google: '',\r\n    status: false,\r\n    fromWaypoint: '',\r\n    toWaypoint: '',\r\n    addWaypoint: []\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GOOGLE_API:\r\n            return {\r\n                ...state,\r\n                google: action.google\r\n            };\r\n        case FROM_WAYPOINT:\r\n            return{\r\n                ...state,\r\n                fromWaypoint: action.waypoint\r\n            };\r\n        case TO_WAYPOINT:\r\n            return{\r\n                ...state,\r\n                toWaypoint: action.waypoint\r\n            };\r\n        case ADD_WAYPOINT:\r\n            return{\r\n                ...state,\r\n                addWaypoint: state.addWaypoint.push(action.waypoint)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport mapReducer from './mapReducer'\r\n\r\nexport default combineReducers({\r\n    map: mapReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware(thunk)\n    )\n);\nconst application = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\nReactDOM.render(application, document.getElementById('root'));\n"],"sourceRoot":""}