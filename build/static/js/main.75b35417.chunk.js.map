{"version":3,"sources":["store/actions/actionTypes.js","Components/Map/Map.js","App.js","store/actions/mapAction.js","Components/Map/Wrapper.js","store/reducers/mapReducer.js","store/reducers/rootReducer.js","index.js"],"names":["GOOGLE_API","GoogleMap","state","center","lat","lng","loaded","loadGoogleData","map","_this","props","googleApi","setState","_this2","this","setTimeout","google","maps","Map","document","getElementById","zoom","mapTypeId","gestureHandling","disableDefaultUI","react_default","a","createElement","id","React","Component","connect","SortableItem","SortableList","dispatch","type","Wrapper","mdbreact_esm","size","className","cardClassname","title","children","App","isOpen","fromLatLng","waypoints","polyline","markers","addresses","editMode","valueFrom","routes","tempAddress","latLng","error","addressesCopy","css","wrapper","travelMode","setPoint","address","setCenter","length","setMap","push","marker","Marker","position","draggable","animation","Animation","DROP","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","infowindow","InfoWindow","content","addListener","open","event","getNewAddress","getPosition","setContent","pos","dismissAll","localPosition","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","value","_ref2","Object","slicedToArray","index","err","return","Geocoder","geocode","results","status","GeocoderStatus","OK","formatted_address","localLatLng","geometry","location","notify","setPosition","recreatePoly","deleteMarker","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref6","_ref5","i","item","splice","getPath","removeAt","deleteAllMarkers","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","createRoute","request","from","to","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","setOptions","suppressMarkers","waypts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","stopover","origin","LatLng","destination","optimizeWaypoints","route","response","window","DirectionsStatus","setDirections","toggleOptions","deleteRoute","setPointAsCenter","addListItem","keys","key","onClick","bind","hover","handleSelect","geocodeByAddress","then","getLatLng","setMarker","catch","onSortEnd","_ref7","oldIndex","newIndex","_ref8","arrayMove","listOfRoutes","fromAddress","toAddress","toast","success","warn","chooseTravelMode","target","DirectionsTravelMode","DRIVING","WALKING","TRANSIT","BICYCLING","dismiss","onError","clearSuggestions","SortableElement","_ref9","SortableContainer","_ref10","items","concat","autocomplete","itemRoute","dist_default","onChange","onSelect","_ref11","getInputProps","suggestions","getSuggestionItemProps","loading","assign","hint","name","placeholder","role","suggestion","active","style","backgroundColor","cursor","description","color","dark","expand","fluid","hideProgressBar","newestOnTop","autoClose","around","Map_Wrapper","htmlFor","display","caret","defaultValue","marginTop","initialState","combineReducers","arguments","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","application","es","src_App_0","ReactDOM","render"],"mappings":"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","file":"static/js/main.75b35417.chunk.js","sourcesContent":["export const GOOGLE_API = 'GOOGLE_API'","import React from 'react';\r\nimport './map.css'\r\nimport {connect} from \"react-redux\";\r\nimport {googleApi} from '../../store/actions/mapAction'\r\n\r\n/*global google*/\r\n\r\nclass GoogleMap extends React.Component {\r\n    state = {\r\n        center: {lat: 46.482886, lng: 30.735430},\r\n        loaded: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n\r\n            let map = new google.maps.Map(document.getElementById('map'), {\r\n                center: this.state.center,\r\n                zoom: 5,\r\n                mapTypeId: 'roadmap',\r\n                gestureHandling: 'greedy',\r\n                disableDefaultUI: true\r\n            });\r\n\r\n            if (this.state.loaded === false) {\r\n                this.loadGoogleData(map);\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\"/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        googleApi: map => dispatch(googleApi(map))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(GoogleMap);\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport GoogleMap from './Components/Map/Map'\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBBtn,\r\n    MDBRow,\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBCardText,\r\n    MDBListGroup,\r\n    MDBListGroupItem,\r\n    ToastContainer,\r\n    toast,\r\n    MDBDropdown,\r\n    MDBDropdownToggle,\r\n    MDBDropdownMenu,\r\n    MDBDropdownItem\r\n} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\r\nimport arrayMove from 'array-move';\r\nimport Wrapper from \"./Components/Map/Wrapper\";\r\n\r\n/* global google */\r\n\r\n\r\nlet SortableItem, SortableList;\r\n\r\nclass App extends Component {\r\n    state = {\r\n        isOpen: false,\r\n        fromLatLng: '',\r\n        waypoints: [],\r\n        polyline: [],\r\n        markers: [],\r\n        addresses: [],\r\n        editMode: true,\r\n        valueFrom: '',\r\n        routes: [],\r\n        tempAddress: '',\r\n        latLng: '',\r\n        error: false,\r\n        addressesCopy: [],\r\n        css: 'd-none',\r\n        wrapper: 'settings-wrapper z0',\r\n        travelMode: '',\r\n        loaded: false\r\n    };\r\n    componentDidMount() {\r\n        SortableItem = SortableElement(({value}) =>\r\n            <div\r\n                className=\"list-item-box\">\r\n                <MDBListGroupItem\r\n                    hover\r\n                >{value}\r\n                </MDBListGroupItem>\r\n            </div>);\r\n        SortableList = SortableContainer(({items}) => {\r\n            return (\r\n                <div>\r\n                    {items.map((value, index) => (\r\n                        <SortableItem key={`item-${index}`} index={index} value={value}/>\r\n                    ))}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.state.loaded === false){\r\n            this.setState({\r\n                travelMode: google.maps.DirectionsTravelMode.DRIVING,\r\n                loaded: true\r\n            })\r\n        }\r\n    }\r\n    setPoint = (latLng, address) => {\r\n        this.props.google.setCenter(latLng)\r\n        let waypoints = this.state.waypoints;\r\n        let polyline = this.state.polyline;\r\n        let markers = this.state.markers;\r\n        if (waypoints.length > 1) {\r\n            polyline.setMap(null);\r\n        }\r\n        waypoints.push(latLng);\r\n\r\n        let marker = new google.maps.Marker({\r\n            position: latLng,\r\n            map: this.props.google,\r\n            draggable: true,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        markers.push(marker);\r\n        polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.setState({\r\n            waypoints,\r\n            polyline,\r\n            markers\r\n        })\r\n        let infowindow = new google.maps.InfoWindow({\r\n            content: address\r\n        });\r\n        marker.addListener('click', () => {\r\n            infowindow.open(this.props.google, marker);\r\n        });\r\n        google.maps.event.addListener(marker, 'dragend', () => {\r\n            this.getNewAddress(marker, marker.getPosition());\r\n            setTimeout(() => {\r\n                infowindow.setContent(this.state.tempAddress);\r\n            }, 500);\r\n        });\r\n\r\n    }\r\n    getNewAddress = (marker, pos) => {\r\n        this.dismissAll();\r\n        let polyline = this.state.polyline;\r\n        polyline.setMap(null);\r\n        this.setState({\r\n            polyline\r\n        })\r\n        let markers = this.state.markers;\r\n        let waypoints = this.state.waypoints;\r\n        let addresses = this.state.addresses;\r\n        let localPosition;\r\n        for (const [index, value] of markers.entries()) {\r\n            if (marker === value) {\r\n                localPosition = index;\r\n            }\r\n        }\r\n        let geocoder = new google.maps.Geocoder();\r\n        geocoder.geocode({latLng: pos}, (results, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    addresses[localPosition] = results[0].formatted_address;\r\n                    let localLatLng = {\r\n                        lat: results[0].geometry.location.lat(),\r\n                        lng: results[0].geometry.location.lng()\r\n                    };\r\n                    markers[localPosition] = marker;\r\n                    waypoints[localPosition] = localLatLng;\r\n                    this.setState({\r\n                        markers,\r\n                        addresses,\r\n                        waypoints,\r\n                        tempAddress: results[0].formatted_address\r\n                    })\r\n                } else {\r\n                    this.notify('pointError');\r\n                    markers[localPosition].setPosition(waypoints[localPosition]);\r\n                    this.setState({\r\n                        markers\r\n                    })\r\n                }\r\n            }\r\n        );\r\n        setTimeout(() => {\r\n            this.recreatePoly();\r\n        }, 500);\r\n    }\r\n    deleteMarker = (event) => {\r\n        let markers = this.state.markers;\r\n        let marker = markers[event];\r\n        let addresses = this.state.addresses;\r\n        let waypoints = this.state.waypoints;\r\n        for (const [i, item] of markers.entries()) {\r\n            if (item === marker) {\r\n                item.setMap(null);\r\n                markers.splice(i, 1);\r\n                waypoints.splice(i, 1);\r\n                addresses.splice(i, 1);\r\n                this.state.polyline.getPath().removeAt(i);\r\n\r\n                this.setState({\r\n                    markers,\r\n                    waypoints,\r\n                    addresses\r\n                })\r\n            }\r\n        }\r\n    }\r\n    deleteAllMarkers = () => {\r\n        this.state.polyline.setMap(null);\r\n        let markers = this.state.markers;\r\n        for (const item of markers) {\r\n            item.setMap(null);\r\n        }\r\n        markers = [];\r\n        this.setState({\r\n            markers,\r\n            addresses: []\r\n        })\r\n    }\r\n    createRoute = () => {\r\n        this.dismissAll();\r\n        if (this.state.waypoints.length < 2) {\r\n            return;\r\n        }\r\n        let address = this.state.addresses;\r\n        let addressesCopy = this.state.addressesCopy;\r\n        addressesCopy.push({from: address[0], to: address[address.length - 1]});\r\n        let request;\r\n        let directionsService = new google.maps.DirectionsService();\r\n        let directionsDisplay = new google.maps.DirectionsRenderer();\r\n\r\n        directionsDisplay.setOptions({suppressMarkers: false});\r\n\r\n        directionsDisplay.setMap(this.props.google);\r\n\r\n        if (this.state.waypoints.length > 2) {\r\n            let waypts = this.state.waypoints;\r\n            let waypoints = [];\r\n            for (let item of waypts) {\r\n                waypoints.push({location: item, stopover: true});\r\n            }\r\n            waypoints.splice(0, 1);\r\n            waypoints.splice(waypoints.length - 1, 1);\r\n            request = {\r\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\r\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\r\n                waypoints: waypoints,\r\n                optimizeWaypoints: false,\r\n                travelMode: this.state.travelMode\r\n            };\r\n        } else {\r\n            request = {\r\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\r\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\r\n                optimizeWaypoints: false,\r\n                travelMode: this.state.travelMode\r\n            };\r\n        }\r\n        directionsService.route(request, (response, status) => {\r\n            if (status === window.google.maps.DirectionsStatus.OK) {\r\n                this.deleteAllMarkers();\r\n                directionsDisplay.setDirections(response);\r\n                this.notify('routeCreated');\r\n                directionsDisplay.setMap(this.props.google);\r\n                let routes = this.state.routes;\r\n                routes.push(directionsDisplay);\r\n                this.setState({\r\n                    waypoints: [],\r\n                    routes,\r\n                    addressesCopy\r\n                });\r\n                this.toggleOptions();\r\n            } else {\r\n                this.notify('routeError');\r\n            }\r\n        });\r\n\r\n    }\r\n    deleteRoute = (event) => {\r\n        let addressesCopy = this.state.addressesCopy;\r\n        let routes = this.state.routes;\r\n        addressesCopy.splice(event, 1);\r\n        routes[event].setMap(null);\r\n        routes.splice(event, 1);\r\n        this.setState({\r\n            routes,\r\n            addressesCopy\r\n        })\r\n        this.notify('routeDelete');\r\n    }\r\n    setPointAsCenter = (event) => {\r\n        let latLng = this.state.markers[event];\r\n        latLng = {lat: latLng.getPosition().lat(), lng: latLng.getPosition().lng()}\r\n        this.props.google.setCenter(latLng)\r\n    }\r\n    recreatePoly = () => {\r\n        let waypoints = this.state.waypoints;\r\n        let polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.setState({\r\n            waypoints,\r\n            polyline\r\n        })\r\n    }\r\n    addListItem = () => {\r\n        return Object.keys(this.state.addresses).map((pos, index) => {\r\n            let address = this.state.addresses[pos];\r\n            return (\r\n                <div key={'item-' + index} className=\"list-item-box\">\r\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\r\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\r\n                    </div>\r\n                    <MDBListGroupItem\r\n                        onClick={this.setPointAsCenter.bind(null, pos)}\r\n                        hover\r\n                        key={index}\r\n                    >{address}\r\n                    </MDBListGroupItem>\r\n                    <div className=\"delete-item-box\" key={'box-' + index}\r\n                         onClick={this.deleteMarker.bind(null, pos)}>\r\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    handleSelect = address => {\r\n        this.dismissAll();\r\n        let addresses = this.state.addresses;\r\n        geocodeByAddress(address)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng => {\r\n                addresses.push(address);\r\n                this.setState({\r\n                    valueFrom: '',\r\n                    latLng,\r\n                    addresses\r\n                })\r\n                this.setMarker(latLng, address);\r\n            })\r\n            .catch(() => {\r\n                this.setMarker();\r\n            });\r\n    };\r\n    setMarker = (latLng, address) => {\r\n        if (latLng) {\r\n            this.notify('pointCreated');\r\n            this.setPoint(latLng, address)\r\n        } else {\r\n            this.notify('placeError');\r\n        }\r\n    }\r\n    onSortEnd = ({oldIndex, newIndex}) => {\r\n        let polyline = this.state.polyline;\r\n        polyline.setMap(null);\r\n        this.setState(({addresses, waypoints, markers}) => ({\r\n            addresses: arrayMove(addresses, oldIndex, newIndex),\r\n            waypoints: arrayMove(waypoints, oldIndex, newIndex),\r\n            markers: arrayMove(markers, oldIndex, newIndex),\r\n            polyline\r\n        }));\r\n        this.recreatePoly();\r\n    };\r\n    listOfRoutes = () => {\r\n        return Object.keys(this.state.routes).map((pos, index) => {\r\n            let address = this.state.addressesCopy[pos];\r\n            let fromAddress = address.from;\r\n            let toAddress = address.to;\r\n            return (\r\n                <div key={'item-' + index} className=\"list-item-box\">\r\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\r\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\r\n                    </div>\r\n                    <MDBListGroupItem\r\n                        hover\r\n                        key={index}\r\n                    >From: {fromAddress} To: {toAddress}\r\n                    </MDBListGroupItem>\r\n                    <div className=\"delete-item-box\" key={'box-' + index}\r\n                         onClick={this.deleteRoute.bind(null, pos)}>\r\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n    }\r\n    toggleOptions = () => {\r\n        if (this.state.css === 'settings animated fadeInLeft') {\r\n            this.setState({\r\n                css: 'settings animated fadeOutLeft',\r\n            })\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    wrapper: 'settings-wrapper z0'\r\n                })\r\n            }, 500);\r\n        } else {\r\n            this.setState({\r\n                css: 'settings animated fadeInLeft',\r\n                wrapper: 'settings-wrapper'\r\n            })\r\n        }\r\n    }\r\n    notify = type => {\r\n        switch (type) {\r\n            case 'pointCreated':\r\n                toast.success('Waypoint created');\r\n                break;\r\n            case 'pointError':\r\n                toast.error('Incorrect place to draw a line');\r\n                break;\r\n            case 'placeError':\r\n                toast.error('Please select a place from the list');\r\n                break;\r\n            case 'routeCreated':\r\n                toast.success('Route created');\r\n                break;\r\n            case 'routeError':\r\n                toast.error('Its too far to create this route');\r\n                break;\r\n            case 'routeDelete':\r\n                toast.warn('Route deleted');\r\n                break;\r\n            case 'noResults':\r\n                toast.warn('No results for this request');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    chooseTravelMode = event => {\r\n        switch (event.target.value) {\r\n            case 'DRIVING':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.DRIVING\r\n                })\r\n                break;\r\n            case 'WALKING':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.WALKING\r\n                })\r\n                break;\r\n            case 'TRANSIT':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.TRANSIT\r\n                })\r\n                break;\r\n            case 'BICYCLING':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.BICYCLING\r\n                })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    dismissAll = () => toast.dismiss();\r\n    onError = (status, clearSuggestions) =>{\r\n        this.dismissAll();\r\n        this.notify('noResults');\r\n        clearSuggestions();\r\n    }\r\n    render() {\r\n        let item, autocomplete, itemRoute;\r\n\r\n        if (this.state.editMode) {\r\n            item = this.addListItem();\r\n        } else {\r\n            item =\r\n                (<SortableList items={this.state.addresses} onSortEnd={this.onSortEnd}/>);\r\n        }\r\n        itemRoute = this.listOfRoutes();\r\n        autocomplete = (<PlacesAutocomplete\r\n            value={this.state.valueFrom}\r\n            onChange={valueFrom => this.setState({valueFrom})}\r\n            onSelect={this.handleSelect}\r\n            onError={this.onError}\r\n        >\r\n            {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\r\n                <div>\r\n                    <MDBInput\r\n                        hint=\"Add waypoint\"\r\n                        id=\"from_value\"\r\n                        name=\"valueFrom\"\r\n                        {...getInputProps({\r\n                            placeholder: 'Search Places ...',\r\n                            className: 'location-search-input',\r\n                        })}\r\n                    />\r\n                    <div className=\"autocomplete-dropdown-container\">\r\n                        {loading && <div className=\"spinner-grow text-info\" role=\"status\"></div>}\r\n                        {suggestions.map(suggestion => {\r\n                            const className = suggestion.active\r\n                                ? 'suggestion-item--active'\r\n                                : 'suggestion-item';\r\n                            const style = suggestion.active\r\n                                ? {backgroundColor: '#fafafa', cursor: 'pointer'}\r\n                                : {backgroundColor: '#ffffff', cursor: 'pointer'};\r\n                            return (\r\n                                <div\r\n                                    {...getSuggestionItemProps(suggestion, {\r\n                                        className,\r\n                                        style,\r\n                                    })}\r\n                                >\r\n                                    <span>{suggestion.description}</span>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </PlacesAutocomplete>)\r\n        return (\r\n            <div className=\"App\">\r\n                {!this.props.google ? <div className=\"preloader\">\r\n                    <div className=\"spinner-grow text-info\" role=\"status\"></div>\r\n                </div> : false}\r\n                <MDBNavbar color=\"elegant-color-dark\" dark expand=\"md\">\r\n                    <MDBNavbarBrand>\r\n                        <strong className=\"white-text\">RouteFinder</strong>\r\n                    </MDBNavbarBrand>\r\n                    <MDBBtn className=\"toggleOptions\" onClick={this.toggleOptions} color=\"amber\" size=\"sm\">Toggle options</MDBBtn>\r\n                </MDBNavbar>\r\n                <MDBContainer fluid>\r\n                    <ToastContainer\r\n                        className=\"toaster\"\r\n                        hideProgressBar={true}\r\n                        newestOnTop={true}\r\n                        autoClose={5000}\r\n                    />\r\n                    <MDBRow around>\r\n                        <Wrapper title=\"Settings\" size=\"12\" className={this.state.wrapper}\r\n                                 cardClassname={this.state.css}>\r\n                            <MDBCardText>\r\n                                You can choose variant with arrows and press Enter to add a waypoint.\r\n                            </MDBCardText>\r\n                            {this.props.google ? autocomplete : false}\r\n                            <div className=\"options\">\r\n                                <MDBBtn size=\"sm\" onClick={this.createRoute}>Create Route</MDBBtn>\r\n                                <input type=\"checkbox\"\r\n                                       id=\"id-name--1\"\r\n                                       name=\"edit-mode\"\r\n                                       className=\"switch-input\"\r\n                                       onChange={() => this.setState({editMode: !this.state.editMode})}\r\n                                />\r\n                                <label htmlFor=\"id-name--1\" className=\"switch-label\">Edit mode <span\r\n                                    className=\"toggle--on\">On</span><span\r\n                                    className=\"toggle--off\">Off</span></label>\r\n                                <MDBDropdown size=\"sm\" style={{display: \"inline-flex\"}} onClick={this.chooseTravelMode}>\r\n                                    <MDBDropdownToggle caret color=\"mdb-color\" defaultValue={this.state.travelMode}>Travel Mode</MDBDropdownToggle>\r\n                                    <MDBDropdownMenu>\r\n                                        <MDBDropdownItem value=\"DRIVING\">Driving</MDBDropdownItem>\r\n                                        <MDBDropdownItem value=\"BICYCLING\">Bicycling</MDBDropdownItem>\r\n                                        <MDBDropdownItem value=\"TRANSIT\">Transit</MDBDropdownItem>\r\n                                        <MDBDropdownItem value=\"WALKING\">Walking</MDBDropdownItem>\r\n                                    </MDBDropdownMenu>\r\n                                </MDBDropdown>\r\n                            </div>\r\n                            <h3>Waypoints</h3>\r\n                            <MDBListGroup style={{marginTop: '25px'}}>\r\n                                {this.state.addresses.length >= 1 ? item : 'No waypoints created'}\r\n                            </MDBListGroup>\r\n                            <h3 style={{marginTop: '10px'}}>Routes</h3>\r\n                            <MDBListGroup style={{marginTop: '25px'}}>\r\n                                {this.state.routes.length > 0 ? itemRoute : 'No routes created'}\r\n                            </MDBListGroup>\r\n                        </Wrapper>\r\n                        <GoogleMap/>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import {\r\n    GOOGLE_API\r\n} from \"./actionTypes\";\r\n\r\nexport function googleApi(google) {\r\n    return {\r\n        type: GOOGLE_API,\r\n        google\r\n    };\r\n}","import {MDBCard, MDBCardBody, MDBCardTitle, MDBCol} from \"mdbreact\";\r\nimport React, {Component} from \"react\";\r\n\r\nclass Wrapper extends Component {\r\n    render() {\r\n        return (\r\n            <MDBCol size={this.props.size} className={this.props.className}>\r\n                <MDBCard className={this.props.cardClassname}>\r\n                    <MDBCardBody>\r\n                        <MDBCardTitle>{this.props.title}</MDBCardTitle>\r\n                        {this.props.children}\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            </MDBCol>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import {\r\n    GOOGLE_API\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    google: ''\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GOOGLE_API:\r\n            return {\r\n                ...state,\r\n                google: action.google\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport mapReducer from './mapReducer'\r\n\r\nexport default combineReducers({\r\n    map: mapReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware(thunk)\n    )\n);\nconst application = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n)\nReactDOM.render(application, document.getElementById('root'));\n"],"sourceRoot":""}