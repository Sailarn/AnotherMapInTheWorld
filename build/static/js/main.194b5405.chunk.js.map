{"version":3,"sources":["store/actions/actionTypes.js","Components/Map/Map.js","App.js","store/actions/mapAction.js","Components/Map/Wrapper.js","store/reducers/mapReducer.js","store/reducers/rootReducer.js","index.js"],"names":["GOOGLE_API","GoogleMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadGoogleData","map","googleApi","setState","loaded","state","center","lat","lng","_this2","setTimeout","google","maps","Map","document","getElementById","zoom","mapTypeId","gestureHandling","disableDefaultUI","react_default","a","createElement","id","React","Component","connect","SortableItem","SortableList","dispatch","type","Wrapper","mdbreact_esm","size","className","cardClassname","title","children","App","isOpen","fromLatLng","waypoints","polyline","markers","addresses","editMode","valueFrom","routes","tempAddress","latLng","error","addressesCopy","css","wrapper","travelMode","setPoint","address","setCenter","length","setMap","push","marker","Marker","position","draggable","animation","Animation","DROP","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","infowindow","InfoWindow","content","addListener","open","event","getNewAddress","getPosition","setContent","pos","dismissAll","localPosition","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","index","err","return","Geocoder","geocode","results","status","GeocoderStatus","OK","formatted_address","localLatLng","geometry","location","notify","setPosition","recreatePoly","deleteMarker","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref6","_ref5","i","item","splice","getPath","removeAt","deleteAllMarkers","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","createRoute","request","from","to","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","setOptions","suppressMarkers","waypts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","stopover","origin","LatLng","destination","optimizeWaypoints","route","response","window","DirectionsStatus","setDirections","toggleOptions","deleteRoute","setPointAsCenter","addListItem","keys","key","onClick","bind","hover","handleSelect","geocodeByAddress","then","getLatLng","setMarker","catch","onSortEnd","_ref7","oldIndex","newIndex","_ref8","arrayMove","listOfRoutes","fromAddress","toAddress","toast","success","warn","chooseTravelMode","target","DirectionsTravelMode","DRIVING","WALKING","TRANSIT","BICYCLING","dismiss","onError","clearSuggestions","SortableElement","_ref9","SortableContainer","_ref10","items","concat","autocomplete","itemRoute","dist_default","onChange","onSelect","_ref11","getInputProps","suggestions","getSuggestionItemProps","loading","assign","hint","name","placeholder","role","suggestion","active","style","backgroundColor","cursor","description","color","dark","expand","fluid","hideProgressBar","newestOnTop","autoClose","around","Map_Wrapper","htmlFor","display","caret","defaultValue","marginTop","initialState","combineReducers","arguments","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","application","es","react_router_dom","src_App_0","ReactDOM","render"],"mappings":"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","file":"static/js/main.194b5405.chunk.js","sourcesContent":["export const GOOGLE_API = 'GOOGLE_API'","import React from 'react';\r\nimport './map.css'\r\nimport {connect} from \"react-redux\";\r\nimport {googleApi} from '../../store/actions/mapAction'\r\n\r\n/*global google*/\r\n\r\nclass GoogleMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            center: {lat: 46.482886, lng: 30.735430},\r\n            map: '',\r\n            loaded: false\r\n        };\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true,\r\n            map: map\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n\r\n            let map = new google.maps.Map(document.getElementById('map'), {\r\n                center: this.state.center,\r\n                zoom: 5,\r\n                mapTypeId: 'roadmap',\r\n                gestureHandling: 'greedy',\r\n                disableDefaultUI: true\r\n            });\r\n\r\n            if (this.state.loaded === false) {\r\n                this.loadGoogleData(map);\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n        this.setState({\r\n            loaded: true,\r\n            map: map\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        googleApi: map => dispatch(googleApi(map))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(GoogleMap);\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport GoogleMap from './Components/Map/Map'\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBBtn,\r\n    MDBRow,\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBCardText,\r\n    MDBListGroup,\r\n    MDBListGroupItem,\r\n    ToastContainer,\r\n    toast,\r\n    MDBDropdown,\r\n    MDBDropdownToggle,\r\n    MDBDropdownMenu,\r\n    MDBDropdownItem\r\n} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\r\nimport arrayMove from 'array-move';\r\nimport Wrapper from \"./Components/Map/Wrapper\";\r\n\r\n/* global google */\r\n\r\n\r\nlet SortableItem, SortableList;\r\n\r\nclass App extends Component {\r\n    state = {\r\n        isOpen: false,\r\n        fromLatLng: '',\r\n        waypoints: [],\r\n        polyline: [],\r\n        markers: [],\r\n        addresses: [],\r\n        editMode: true,\r\n        valueFrom: '',\r\n        routes: [],\r\n        tempAddress: '',\r\n        latLng: '',\r\n        error: false,\r\n        addressesCopy: [],\r\n        css: 'settings animated fadeOutLeft',\r\n        wrapper: 'settings-wrapper z0',\r\n        travelMode: '',\r\n        loaded: false\r\n    };\r\n    componentDidMount() {\r\n        SortableItem = SortableElement(({value}) =>\r\n            <div\r\n                className=\"list-item-box\">\r\n                <MDBListGroupItem\r\n                    hover\r\n                >{value}\r\n                </MDBListGroupItem>\r\n            </div>);\r\n        SortableList = SortableContainer(({items}) => {\r\n            return (\r\n                <div>\r\n                    {items.map((value, index) => (\r\n                        <SortableItem key={`item-${index}`} index={index} value={value}/>\r\n                    ))}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.state.loaded === false){\r\n            this.setState({\r\n                travelMode: google.maps.DirectionsTravelMode.DRIVING,\r\n                loaded: true\r\n            })\r\n        }\r\n    }\r\n    setPoint = (latLng, address) => {\r\n        this.props.google.setCenter(latLng)\r\n        let waypoints = this.state.waypoints;\r\n        let polyline = this.state.polyline;\r\n        let markers = this.state.markers;\r\n        if (waypoints.length > 1) {\r\n            polyline.setMap(null);\r\n        }\r\n        waypoints.push(latLng);\r\n\r\n        let marker = new google.maps.Marker({\r\n            position: latLng,\r\n            map: this.props.google,\r\n            draggable: true,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        markers.push(marker);\r\n        polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.setState({\r\n            waypoints,\r\n            polyline,\r\n            markers\r\n        })\r\n        let infowindow = new google.maps.InfoWindow({\r\n            content: address\r\n        });\r\n        marker.addListener('click', () => {\r\n            infowindow.open(this.props.google, marker);\r\n        });\r\n        google.maps.event.addListener(marker, 'dragend', () => {\r\n            this.getNewAddress(marker, marker.getPosition());\r\n            setTimeout(() => {\r\n                infowindow.setContent(this.state.tempAddress);\r\n            }, 500);\r\n        });\r\n\r\n    }\r\n    getNewAddress = (marker, pos) => {\r\n        this.dismissAll();\r\n        let polyline = this.state.polyline;\r\n        polyline.setMap(null);\r\n        this.setState({\r\n            polyline\r\n        })\r\n        let markers = this.state.markers;\r\n        let waypoints = this.state.waypoints;\r\n        let addresses = this.state.addresses;\r\n        let localPosition;\r\n        for (const [index, value] of markers.entries()) {\r\n            if (marker === value) {\r\n                localPosition = index;\r\n            }\r\n        }\r\n        let geocoder = new google.maps.Geocoder();\r\n        geocoder.geocode({latLng: pos}, (results, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    addresses[localPosition] = results[0].formatted_address;\r\n                    let localLatLng = {\r\n                        lat: results[0].geometry.location.lat(),\r\n                        lng: results[0].geometry.location.lng()\r\n                    };\r\n                    markers[localPosition] = marker;\r\n                    waypoints[localPosition] = localLatLng;\r\n                    this.setState({\r\n                        markers,\r\n                        addresses,\r\n                        waypoints,\r\n                        tempAddress: results[0].formatted_address\r\n                    })\r\n                } else {\r\n                    this.notify('pointError');\r\n                    markers[localPosition].setPosition(waypoints[localPosition]);\r\n                    this.setState({\r\n                        markers\r\n                    })\r\n                }\r\n            }\r\n        );\r\n        setTimeout(() => {\r\n            this.recreatePoly();\r\n        }, 500);\r\n    }\r\n    deleteMarker = (event) => {\r\n        let markers = this.state.markers;\r\n        let marker = markers[event];\r\n        let addresses = this.state.addresses;\r\n        let waypoints = this.state.waypoints;\r\n        for (const [i, item] of markers.entries()) {\r\n            if (item === marker) {\r\n                item.setMap(null);\r\n                markers.splice(i, 1);\r\n                waypoints.splice(i, 1);\r\n                addresses.splice(i, 1);\r\n                this.state.polyline.getPath().removeAt(i);\r\n\r\n                this.setState({\r\n                    markers,\r\n                    waypoints,\r\n                    addresses\r\n                })\r\n            }\r\n        }\r\n    }\r\n    deleteAllMarkers = () => {\r\n        this.state.polyline.setMap(null);\r\n        let markers = this.state.markers;\r\n        for (const item of markers) {\r\n            item.setMap(null);\r\n        }\r\n        markers = [];\r\n        this.setState({\r\n            markers,\r\n            addresses: []\r\n        })\r\n    }\r\n    createRoute = () => {\r\n        this.dismissAll();\r\n        if (this.state.waypoints.length < 2) {\r\n            return;\r\n        }\r\n        let address = this.state.addresses;\r\n        let addressesCopy = this.state.addressesCopy;\r\n        addressesCopy.push({from: address[0], to: address[address.length - 1]});\r\n        let request;\r\n        let directionsService = new google.maps.DirectionsService();\r\n        let directionsDisplay = new google.maps.DirectionsRenderer();\r\n\r\n        directionsDisplay.setOptions({suppressMarkers: false});\r\n\r\n        directionsDisplay.setMap(this.props.google);\r\n\r\n        if (this.state.waypoints.length > 2) {\r\n            let waypts = this.state.waypoints;\r\n            let waypoints = [];\r\n            for (let item of waypts) {\r\n                waypoints.push({location: item, stopover: true});\r\n            }\r\n            waypoints.splice(0, 1);\r\n            waypoints.splice(waypoints.length - 1, 1);\r\n            request = {\r\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\r\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\r\n                waypoints: waypoints,\r\n                optimizeWaypoints: false,\r\n                travelMode: this.state.travelMode\r\n            };\r\n        } else {\r\n            request = {\r\n                origin: new google.maps.LatLng(this.state.waypoints[0]),\r\n                destination: new google.maps.LatLng(this.state.waypoints[this.state.waypoints.length - 1]),\r\n                optimizeWaypoints: false,\r\n                travelMode: this.state.travelMode\r\n            };\r\n        }\r\n        directionsService.route(request, (response, status) => {\r\n            if (status === window.google.maps.DirectionsStatus.OK) {\r\n                this.deleteAllMarkers();\r\n                directionsDisplay.setDirections(response);\r\n                this.notify('routeCreated');\r\n                directionsDisplay.setMap(this.props.google);\r\n                let routes = this.state.routes;\r\n                routes.push(directionsDisplay);\r\n                this.setState({\r\n                    waypoints: [],\r\n                    routes,\r\n                    addressesCopy\r\n                });\r\n                this.toggleOptions();\r\n            } else {\r\n                this.notify('routeError');\r\n            }\r\n        });\r\n\r\n    }\r\n    deleteRoute = (event) => {\r\n        let addressesCopy = this.state.addressesCopy;\r\n        let routes = this.state.routes;\r\n        addressesCopy.splice(event, 1);\r\n        routes[event].setMap(null);\r\n        routes.splice(event, 1);\r\n        this.setState({\r\n            routes,\r\n            addressesCopy\r\n        })\r\n        this.notify('routeDelete');\r\n    }\r\n    setPointAsCenter = (event) => {\r\n        let latLng = this.state.markers[event];\r\n        latLng = {lat: latLng.getPosition().lat(), lng: latLng.getPosition().lng()}\r\n        this.props.google.setCenter(latLng)\r\n    }\r\n    recreatePoly = () => {\r\n        let waypoints = this.state.waypoints;\r\n        let polyline = this.state.polyline;\r\n        polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.setState({\r\n            waypoints,\r\n            polyline\r\n        })\r\n    }\r\n    addListItem = () => {\r\n        return Object.keys(this.state.addresses).map((pos, index) => {\r\n            let address = this.state.addresses[pos];\r\n            return (\r\n                <div key={'item-' + index} className=\"list-item-box\">\r\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\r\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\r\n                    </div>\r\n                    <MDBListGroupItem\r\n                        onClick={this.setPointAsCenter.bind(null, pos)}\r\n                        hover\r\n                        key={index}\r\n                    >{address}\r\n                    </MDBListGroupItem>\r\n                    <div className=\"delete-item-box\" key={'box-' + index}\r\n                         onClick={this.deleteMarker.bind(null, pos)}>\r\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    handleSelect = address => {\r\n        this.dismissAll();\r\n        let addresses = this.state.addresses;\r\n        geocodeByAddress(address)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng => {\r\n                addresses.push(address);\r\n                this.setState({\r\n                    valueFrom: '',\r\n                    latLng,\r\n                    addresses\r\n                })\r\n                this.setMarker(latLng, address);\r\n            })\r\n            .catch(() => {\r\n                this.setMarker();\r\n            });\r\n    };\r\n    setMarker = (latLng, address) => {\r\n        if (latLng) {\r\n            this.notify('pointCreated');\r\n            this.setPoint(latLng, address)\r\n        } else {\r\n            this.notify('placeError');\r\n        }\r\n    }\r\n\r\n    onSortEnd = ({oldIndex, newIndex}) => {\r\n        let polyline = this.state.polyline;\r\n        polyline.setMap(null);\r\n        this.setState(({addresses, waypoints, markers}) => ({\r\n            addresses: arrayMove(addresses, oldIndex, newIndex),\r\n            waypoints: arrayMove(waypoints, oldIndex, newIndex),\r\n            markers: arrayMove(markers, oldIndex, newIndex),\r\n            polyline\r\n        }));\r\n        this.recreatePoly();\r\n    };\r\n    listOfRoutes = () => {\r\n        return Object.keys(this.state.routes).map((pos, index) => {\r\n            let address = this.state.addressesCopy[pos];\r\n            let fromAddress = address.from;\r\n            let toAddress = address.to;\r\n            return (\r\n                <div key={'item-' + index} className=\"list-item-box\">\r\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\r\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\r\n                    </div>\r\n                    <MDBListGroupItem\r\n                        hover\r\n                        key={index}\r\n                    >From: {fromAddress} To: {toAddress}\r\n                    </MDBListGroupItem>\r\n                    <div className=\"delete-item-box\" key={'box-' + index}\r\n                         onClick={this.deleteRoute.bind(null, pos)}>\r\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n    }\r\n    toggleOptions = () => {\r\n        if (this.state.css === 'settings animated fadeInLeft') {\r\n            this.setState({\r\n                css: 'settings animated fadeOutLeft',\r\n            })\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    wrapper: 'settings-wrapper z0'\r\n                })\r\n            }, 500);\r\n        } else {\r\n            this.setState({\r\n                css: 'settings animated fadeInLeft',\r\n                wrapper: 'settings-wrapper'\r\n            })\r\n        }\r\n    }\r\n    notify = type => {\r\n        switch (type) {\r\n            case 'pointCreated':\r\n                toast.success('Waypoint created');\r\n                break;\r\n            case 'pointError':\r\n                toast.error('Incorrect place to draw a line');\r\n                break;\r\n            case 'placeError':\r\n                toast.error('Please select a place from the list');\r\n                break;\r\n            case 'routeCreated':\r\n                toast.success('Route created');\r\n                break;\r\n            case 'routeError':\r\n                toast.error('Its too far to create this route');\r\n                break;\r\n            case 'routeDelete':\r\n                toast.warn('Route deleted');\r\n                break;\r\n            case 'noResults':\r\n                toast.warn('No results for this request');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    chooseTravelMode = event => {\r\n        switch (event.target.value) {\r\n            case 'DRIVING':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.DRIVING\r\n                })\r\n                break;\r\n            case 'WALKING':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.WALKING\r\n                })\r\n                break;\r\n            case 'TRANSIT':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.TRANSIT\r\n                })\r\n                break;\r\n            case 'BICYCLING':\r\n                this.setState({\r\n                    travelMode: google.maps.DirectionsTravelMode.BICYCLING\r\n                })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    dismissAll = () => toast.dismiss();\r\n    onError = (status, clearSuggestions) =>{\r\n        this.dismissAll();\r\n        this.notify('noResults');\r\n        clearSuggestions();\r\n    }\r\n    render() {\r\n        let item, autocomplete, itemRoute;\r\n\r\n        if (this.state.editMode) {\r\n            item = this.addListItem();\r\n        } else {\r\n            item =\r\n                (<SortableList items={this.state.addresses} onSortEnd={this.onSortEnd}/>);\r\n        }\r\n        itemRoute = this.listOfRoutes();\r\n        autocomplete = (<PlacesAutocomplete\r\n            value={this.state.valueFrom}\r\n            onChange={valueFrom => this.setState({valueFrom})}\r\n            onSelect={this.handleSelect}\r\n            onError={this.onError}\r\n        >\r\n            {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\r\n                <div>\r\n                    <MDBInput\r\n                        hint=\"Add waypoint\"\r\n                        id=\"from_value\"\r\n                        name=\"valueFrom\"\r\n                        {...getInputProps({\r\n                            placeholder: 'Search Places ...',\r\n                            className: 'location-search-input',\r\n                        })}\r\n                    />\r\n                    <div className=\"autocomplete-dropdown-container\">\r\n                        {loading && <div className=\"spinner-grow text-info\" role=\"status\"></div>}\r\n                        {suggestions.map(suggestion => {\r\n                            const className = suggestion.active\r\n                                ? 'suggestion-item--active'\r\n                                : 'suggestion-item';\r\n                            const style = suggestion.active\r\n                                ? {backgroundColor: '#fafafa', cursor: 'pointer'}\r\n                                : {backgroundColor: '#ffffff', cursor: 'pointer'};\r\n                            return (\r\n                                <div\r\n                                    {...getSuggestionItemProps(suggestion, {\r\n                                        className,\r\n                                        style,\r\n                                    })}\r\n                                >\r\n                                    <span>{suggestion.description}</span>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </PlacesAutocomplete>)\r\n        return (\r\n            <div className=\"App\">\r\n                {!this.props.google ? <div className=\"preloader\">\r\n                    <div className=\"spinner-grow text-info\" role=\"status\"></div>\r\n                </div> : false}\r\n                <MDBNavbar color=\"elegant-color-dark\" dark expand=\"md\">\r\n                    <MDBNavbarBrand>\r\n                        <strong className=\"white-text\">RouteFinder</strong>\r\n                    </MDBNavbarBrand>\r\n                    <MDBBtn className=\"toggleOptions\" onClick={this.toggleOptions} color=\"amber\" size=\"sm\">Toggle options</MDBBtn>\r\n                </MDBNavbar>\r\n                <MDBContainer fluid>\r\n                    <ToastContainer\r\n                        className=\"toaster\"\r\n                        hideProgressBar={true}\r\n                        newestOnTop={true}\r\n                        autoClose={5000}\r\n                    />\r\n                    <MDBRow around>\r\n                        <Wrapper title=\"Settings\" size=\"12\" className={this.state.wrapper}\r\n                                 cardClassname={this.state.css}>\r\n                            <MDBCardText>\r\n                                You can choose variant with arrows and press Enter to add a waypoint.\r\n                            </MDBCardText>\r\n                            {this.props.google ? autocomplete : false}\r\n                            <div className=\"options\">\r\n                                <MDBBtn size=\"sm\" onClick={this.createRoute}>Create Route</MDBBtn>\r\n                                <input type=\"checkbox\"\r\n                                       id=\"id-name--1\"\r\n                                       name=\"edit-mode\"\r\n                                       className=\"switch-input\"\r\n                                       onChange={() => this.setState({editMode: !this.state.editMode})}\r\n                                />\r\n                                <label htmlFor=\"id-name--1\" className=\"switch-label\">Edit mode <span\r\n                                    className=\"toggle--on\">On</span><span\r\n                                    className=\"toggle--off\">Off</span></label>\r\n                                <MDBDropdown size=\"sm\" style={{display: \"inline-flex\"}} onClick={this.chooseTravelMode}>\r\n                                    <MDBDropdownToggle caret color=\"mdb-color\" defaultValue={this.state.travelMode}>Travel Mode</MDBDropdownToggle>\r\n                                    <MDBDropdownMenu>\r\n                                        <MDBDropdownItem value=\"DRIVING\">Driving</MDBDropdownItem>\r\n                                        <MDBDropdownItem value=\"BICYCLING\">Bicycling</MDBDropdownItem>\r\n                                        <MDBDropdownItem value=\"TRANSIT\">Transit</MDBDropdownItem>\r\n                                        <MDBDropdownItem value=\"WALKING\">Walking</MDBDropdownItem>\r\n                                    </MDBDropdownMenu>\r\n                                </MDBDropdown>\r\n                            </div>\r\n                            <h3>Waypoints</h3>\r\n                            <MDBListGroup style={{marginTop: '25px'}}>\r\n                                {this.state.addresses.length >= 1 ? item : 'No waypoints created'}\r\n                            </MDBListGroup>\r\n                            <h3 style={{marginTop: '10px'}}>Routes</h3>\r\n                            <MDBListGroup style={{marginTop: '25px'}}>\r\n                                {this.state.routes.length > 0 ? itemRoute : 'No routes created'}\r\n                            </MDBListGroup>\r\n                        </Wrapper>\r\n                        <GoogleMap/>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import {\r\n    GOOGLE_API\r\n} from \"./actionTypes\";\r\n\r\nexport function googleApi(google) {\r\n    return {\r\n        type: GOOGLE_API,\r\n        google\r\n    };\r\n}","import {MDBCard, MDBCardBody, MDBCardTitle, MDBCol} from \"mdbreact\";\r\nimport React, {Component} from \"react\";\r\n\r\nclass Wrapper extends Component {\r\n    render() {\r\n        return (\r\n            <MDBCol size={this.props.size} className={this.props.className}>\r\n                <MDBCard className={this.props.cardClassname}>\r\n                    <MDBCardBody>\r\n                        <MDBCardTitle>{this.props.title}</MDBCardTitle>\r\n                        {this.props.children}\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            </MDBCol>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import {\r\n    GOOGLE_API\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    google: ''\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GOOGLE_API:\r\n            return {\r\n                ...state,\r\n                google: action.google\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport mapReducer from './mapReducer'\r\n\r\nexport default combineReducers({\r\n    map: mapReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware(thunk)\n    )\n);\nconst application = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\nReactDOM.render(application, document.getElementById('root'));\n"],"sourceRoot":""}