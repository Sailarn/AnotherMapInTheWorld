{"version":3,"sources":["store/actions/actionTypes.js","store/actions/mapAction.js","Components/Map/Map.js","Components/NavBar/NavBar.js","Components/Options/OptionsComponents/WaypointsList.js","Components/Wrapper/Wrapper.js","Components/Options/OptionsComponents/ToastFunctions.js","Components/Options/OptionsComponents/RoutesList.js","Components/Options/OptionsComponents/TravelMode.js","Components/Options/OptionsComponents/CreateRouteButton.js","Components/Options/OptionsComponents/EditToggle.js","Components/Options/OptionsComponents/AutoComplete.js","Components/Options/Options.js","App.js","store/reducers/mapReducer.js","store/reducers/rootReducer.js","index.js"],"names":["GOOGLE_API","WAYPOINTS","POLYLINE","MARKERS","ADDRESSES","ADDRESSES_COPY","ROUTES","EDIT_MODE","TRAVEL_MODE","VALUE_FROM","TOGGLE_OPTIONS_CSS","WRAPPER_CSS","setRoutes","routes","type","setAddressesCopy","addresses","setAddresses","setMarkers","markers","setPolyline","poly","setWaypoints","waypoints","GoogleMap","state","center","lat","lng","loadGoogleData","map","_this","props","googleApi","_this2","this","setTimeout","google","maps","Map","document","getElementById","zoom","mapTypeId","gestureHandling","disableDefaultUI","react_default","a","createElement","id","React","Component","connect","dispatch","NavBar","toggleOptions","toggleOptionsCss","wrapperCss","mdbreact_esm","color","dark","expand","className","onClick","size","SortableItem","SortableList","css","Wrapper","cardClassname","title","children","WaypointsList","toggle","recreatePoly","polyline","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","onSortEnd","_ref","oldIndex","newIndex","arrayMove","deleteMarker","event","marker","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref4","value","_ref3","Object","slicedToArray","i","item","splice","getPath","removeAt","err","return","setState","setPointAsCenter","latLng","getPosition","setCenter","addListItem","keys","pos","index","address","key","bind","hover","SortableElement","_ref5","SortableContainer","_ref6","items","concat","editMode","Fragment","style","marginTop","length","data","notify","toast","success","error","warn","dismissAll","dismiss","RoutesList","deleteDumbToggle","deleteRoute","addressesCopy","fromAddress","from","toAddress","to","TravelMode","chooseTravelMode","target","setTravelMode","DirectionsTravelMode","DRIVING","WALKING","TRANSIT","BICYCLING","display","caret","defaultValue","travelMode","toLowerCase","mode","CreateRouteButton","deleteAllMarkers","createRoute","request","push","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","setOptions","suppressMarkers","waypts","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","location","stopover","origin","LatLng","destination","optimizeWaypoints","route","response","status","window","DirectionsStatus","OK","setDirections","setEditMode","name","onChange","htmlFor","AutoComplete","setPoint","Marker","position","draggable","animation","Animation","DROP","infowindow","InfoWindow","content","addListener","open","getNewAddress","setContent","tempAddress","localPosition","_ref2","Geocoder","geocode","results","GeocoderStatus","formatted_address","localLatLng","geometry","setPosition","setMarker","handleSelect","geocodeByAddress","then","getLatLng","setValueFrom","catch","onError","clearSuggestions","dist_default","valueFrom","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","assign","hint","placeholder","role","suggestion","active","backgroundColor","cursor","description","Options","loaded","Components_Wrapper_Wrapper","OptionsComponents_AutoComplete","OptionsComponents_CreateRouteButton","OptionsComponents_EditToggle","OptionsComponents_TravelMode","OptionsComponents_WaypointsList","OptionsComponents_RoutesList","App","Components_NavBar_NavBar","fluid","hideProgressBar","newestOnTop","autoClose","around","Components_Options_Options","initialState","travelModeDefault","combineReducers","arguments","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","application","es","src_App_0","ReactDOM","render"],"mappings":"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","file":"static/js/main.1a9175a9.chunk.js","sourcesContent":["export const GOOGLE_API = 'GOOGLE_API';\r\n\r\nexport const WAYPOINTS = 'WAYPOINTS';\r\nexport const POLYLINE = 'POLYLINE';\r\nexport const MARKERS = 'MARKERS';\r\nexport const ADDRESSES = 'ADDRESSES';\r\nexport const ADDRESSES_COPY = 'ADDRESSES_COPY';\r\nexport const ROUTES = 'ROUTES';\r\n\r\nexport const EDIT_MODE = 'EDIT_MODE';\r\nexport const TRAVEL_MODE = 'TRAVEL_MODE';\r\n\r\nexport const VALUE_FROM = 'VALUE_FROM';\r\nexport const TEMP_ADDRESS = 'TEMP_ADDRESS';\r\n\r\nexport const TOGGLE_OPTIONS_CSS = 'TOGGLE_OPTIONS_CSS';\r\nexport const WRAPPER_CSS = 'WRAPPER_CSS';\r\n","import {\r\n    GOOGLE_API,\r\n    TOGGLE_OPTIONS_CSS,\r\n    WRAPPER_CSS,\r\n    WAYPOINTS,\r\n    POLYLINE,\r\n    MARKERS,\r\n    ADDRESSES,\r\n    ADDRESSES_COPY,\r\n    TRAVEL_MODE,\r\n    ROUTES,\r\n    VALUE_FROM,\r\n    EDIT_MODE\r\n} from \"./actionTypes\";\r\n\r\nexport function setEditeMode(mode) {\r\n    return{\r\n        type: EDIT_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\nexport function setValueFrom(value) {\r\n    return{\r\n        type: VALUE_FROM,\r\n        value\r\n    }\r\n}\r\n\r\nexport function setRoutes(routes) {\r\n    return {\r\n        type: ROUTES,\r\n        routes\r\n    }\r\n}\r\n\r\nexport function setTravelMode(mode) {\r\n    return{\r\n        type: TRAVEL_MODE,\r\n        mode\r\n    }\r\n}\r\nexport function setAddressesCopy(addresses) {\r\n    return{\r\n        type: ADDRESSES_COPY,\r\n        addresses\r\n    }\r\n}\r\nexport function setAddresses(addresses) {\r\n    return{\r\n        type: ADDRESSES,\r\n        addresses\r\n    }\r\n}\r\n\r\nexport function setMarkers(markers) {\r\n    return {\r\n        type: MARKERS,\r\n        markers\r\n    }\r\n}\r\n\r\nexport function setPolyline(poly) {\r\n    return{\r\n        type: POLYLINE,\r\n        poly\r\n    }\r\n}\r\n\r\nexport function setWaypoints(waypoints) {\r\n    return {\r\n        type: WAYPOINTS,\r\n        waypoints\r\n    }\r\n}\r\n\r\nexport function wrapperCss(css) {\r\n    return {\r\n        type: WRAPPER_CSS,\r\n        css\r\n    }\r\n}\r\n\r\nexport function toggleOptions(css) {\r\n    return {\r\n        type: TOGGLE_OPTIONS_CSS,\r\n        css\r\n    }\r\n}\r\n\r\nexport function googleApi(google) {\r\n    return {\r\n        type: GOOGLE_API,\r\n        google\r\n    };\r\n}\r\n","import React from 'react';\r\nimport './map.css'\r\nimport {connect} from \"react-redux\";\r\nimport {googleApi} from '../../store/actions/mapAction'\r\n\r\n/*global google*/\r\n\r\nclass GoogleMap extends React.Component {\r\n    state = {\r\n        center: {lat: 46.482886, lng: 30.735430}\r\n    };\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            let map = new google.maps.Map(document.getElementById('map'), {\r\n                center: this.state.center,\r\n                zoom: 5,\r\n                mapTypeId: 'roadmap',\r\n                gestureHandling: 'greedy',\r\n                disableDefaultUI: true\r\n            });\r\n            this.loadGoogleData(map);\r\n        }, 500);\r\n    };\r\n\r\n    loadGoogleData = (map) => {\r\n        this.props.googleApi(map);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\"/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        googleApi: map => dispatch(googleApi(map))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(GoogleMap);\r\n","import React, {Component} from 'react';\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport {wrapperCss, toggleOptions} from \"../../store/actions/mapAction\";\r\n\r\nclass NavBar extends Component {\r\n\r\n    toggleOptions = () => {\r\n        if (this.props.toggleOptionsCss === 'settings fast animated fadeInLeft') {\r\n            this.props.toggleOptions('settings fast animated fadeOutLeft');\r\n            setTimeout(() => {\r\n                this.props.wrapperCss('settings-wrapper z0')\r\n            }, 500);\r\n        } else {\r\n            this.props.toggleOptions('settings fast animated fadeInLeft');\r\n            this.props.wrapperCss('settings-wrapper');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <MDBNavbar color=\"elegant-color-dark\" dark expand=\"md\">\r\n                <MDBNavbarBrand>\r\n                    <strong className=\"white-text\">RouteFinder</strong>\r\n                </MDBNavbarBrand>\r\n                <MDBBtn className=\"toggleOptions\" onClick={this.toggleOptions} color=\"amber\" size=\"sm\">Toggle\r\n                    options</MDBBtn>\r\n            </MDBNavbar>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        toggleOptions: css => dispatch(toggleOptions(css)),\r\n        wrapperCss: css => dispatch(wrapperCss(css))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        toggleOptionsCss: state.map.toggleOptionsCss\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","import React, {Component} from \"react\";\r\nimport {MDBListGroup, MDBListGroupItem} from \"mdbreact\";\r\nimport {SortableContainer, SortableElement} from \"react-sortable-hoc\";\r\nimport arrayMove from \"array-move\";\r\nimport {\r\n    setAddresses,\r\n    setMarkers,\r\n    setPolyline,\r\n    setWaypoints\r\n} from \"../../../store/actions/mapAction\";\r\nimport {connect} from \"react-redux\";\r\n/* global google */\r\nlet SortableItem, SortableList;\r\n\r\nclass WaypointsList extends Component {\r\n    state = {\r\n        toggle: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        SortableItem = SortableElement(({value}) =>\r\n            <div\r\n                className='list-item-box'>\r\n                <MDBListGroupItem\r\n                    hover\r\n                >{value}\r\n                </MDBListGroupItem>\r\n            </div>);\r\n        SortableList = SortableContainer(({items}) => {\r\n            return (\r\n                <div>\r\n                    {items.map((value, index) => (\r\n                        <SortableItem key={`item-${index}`} index={index} value={value}/>\r\n                    ))}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    recreatePoly = () => {\r\n        let waypoints = this.props.waypoints;\r\n        let polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.props.setWaypoints(waypoints);\r\n        this.props.setPolyline(polyline);\r\n    };\r\n    onSortEnd = ({oldIndex, newIndex}) => {\r\n        let polyline = this.props.polyline;\r\n        polyline.setMap(null);\r\n        this.props.setAddresses(arrayMove(this.props.addresses, oldIndex, newIndex));\r\n        this.props.setWaypoints(arrayMove(this.props.waypoints, oldIndex, newIndex));\r\n        this.props.setMarkers(arrayMove(this.props.markers, oldIndex, newIndex));\r\n        this.props.setPolyline(polyline);\r\n        this.recreatePoly();\r\n    };\r\n    deleteMarker = (event) => {\r\n        let markers = this.props.markers;\r\n        let marker = markers[event];\r\n        let addresses = this.props.addresses;\r\n        let waypoints = this.props.waypoints;\r\n        for (const [i, item] of markers.entries()) {\r\n            if (item === marker) {\r\n                item.setMap(null);\r\n                markers.splice(i, 1);\r\n                waypoints.splice(i, 1);\r\n                addresses.splice(i, 1);\r\n                this.props.polyline.getPath().removeAt(i);\r\n                this.props.setMarkers(markers);\r\n                this.props.setAddresses(addresses);\r\n                this.props.setWaypoints(waypoints);\r\n            }\r\n        }\r\n        this.setState({\r\n            toggle: !this.state.toggle\r\n        })\r\n    };\r\n    setPointAsCenter = (event) => {\r\n        let latLng = this.props.markers[event];\r\n        latLng = {lat: latLng.getPosition().lat(), lng: latLng.getPosition().lng()};\r\n        this.props.google.setCenter(latLng)\r\n    };\r\n    addListItem = () => {\r\n        return Object.keys(this.props.addresses).map((pos, index) => {\r\n            let address = this.props.addresses[pos];\r\n            return (\r\n                <div key={'item-' + index} className=\"list-item-box\">\r\n                    <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\r\n                        <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\r\n                    </div>\r\n                    <MDBListGroupItem\r\n                        onClick={this.setPointAsCenter.bind(null, pos)}\r\n                        hover\r\n                        key={index}\r\n                    >{address}\r\n                    </MDBListGroupItem>\r\n                    <div className=\"delete-item-box\" key={'box-' + index}\r\n                         onClick={this.deleteMarker.bind(null, pos)}\r\n                    >\r\n                        <span key={'x-' + index} className=\"delete-item-btn\">X</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n    render() {\r\n        let item;\r\n        if (this.props.editMode) {\r\n            item = this.addListItem();\r\n        } else {\r\n            item =\r\n                (<SortableList items={this.props.addresses} onSortEnd={this.onSortEnd}/>);\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <h3>Waypoints</h3>\r\n                <MDBListGroup style={{marginTop: '25px'}}>\r\n                    {this.props.addresses.length >= 1 ? item : 'No waypoints created'}\r\n                </MDBListGroup>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setWaypoints: data => dispatch(setWaypoints(data)),\r\n        setAddresses: data => dispatch(setAddresses(data)),\r\n        setMarkers: data => dispatch(setMarkers(data)),\r\n        setPolyline: data => dispatch(setPolyline(data))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google,\r\n        waypoints: state.map.waypoints,\r\n        polyline: state.map.polyline,\r\n        markers: state.map.markers,\r\n        addresses: state.map.addresses,\r\n        editMode: state.map.editMode\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(WaypointsList);\r\n","import {MDBCard, MDBCardBody, MDBCardTitle, MDBCol} from \"mdbreact\";\r\nimport React, {Component} from \"react\";\r\n\r\nclass Wrapper extends Component {\r\n    render() {\r\n        return (\r\n            <MDBCol size={this.props.size} className={this.props.className}>\r\n                <MDBCard className={this.props.cardClassname}>\r\n                    <MDBCardBody>\r\n                        <MDBCardTitle>{this.props.title}</MDBCardTitle>\r\n                        {this.props.children}\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            </MDBCol>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import {\r\n    toast\r\n} from \"mdbreact\";\r\nexport function notify(type) {\r\n    switch (type) {\r\n        case 'pointCreated':\r\n            toast.success('Waypoint created');\r\n            break;\r\n        case 'pointError':\r\n            toast.error('Incorrect place to draw a line');\r\n            break;\r\n        case 'placeError':\r\n            toast.error('Please select a place from the list');\r\n            break;\r\n        case 'routeCreated':\r\n            toast.success('Route created');\r\n            break;\r\n        case 'routeError':\r\n            toast.error('Its too far to create this route');\r\n            break;\r\n        case 'routeDelete':\r\n            toast.warn('Route deleted');\r\n            break;\r\n        case 'noResults':\r\n            toast.warn('No results for this request');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport function dismissAll() {\r\n    toast.dismiss()\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {MDBListGroup, MDBListGroupItem} from \"mdbreact\";\r\nimport {\r\n    setAddressesCopy,\r\n    setRoutes\r\n} from \"../../../store/actions/mapAction\";\r\nimport {notify} from \"./ToastFunctions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass RoutesList extends Component {\r\n    state = {\r\n        deleteDumbToggle: false\r\n    };\r\n\r\n    deleteRoute = (event) => {\r\n        let addressesCopy = this.props.addressesCopy;\r\n        let routes = this.props.routes;\r\n        addressesCopy.splice(event, 1);\r\n        routes[event].setMap(null);\r\n        routes.splice(event, 1);\r\n        this.props.setRoutes(routes);\r\n        this.props.setAddressesCopy(addressesCopy);\r\n        notify('routeDelete');\r\n        this.setState({\r\n            deleteDumbToggle: !this.state.deleteDumbToggle\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h3 style={{marginTop: '10px'}}>Routes</h3>\r\n                <MDBListGroup style={{marginTop: '25px'}}>\r\n                    {this.props.routes.length > 0 ? Object.keys(this.props.routes).map((pos, index) => {\r\n                        let address = this.props.addressesCopy[pos];\r\n                        let fromAddress = address.from;\r\n                        let toAddress = address.to;\r\n                        return (\r\n                            <div key={'item-' + index} className=\"list-item-box\">\r\n                                <div className=\"delete-item-box index-class\" key={'indexBox-' + index}>\r\n                                    <span key={'index-' + index} className=\"delete-item-btn\">{index + 1}</span>\r\n                                </div>\r\n                                <MDBListGroupItem\r\n                                    hover\r\n                                    key={index}\r\n                                >From: {fromAddress} To: {toAddress}\r\n                                </MDBListGroupItem>\r\n                                <div className=\"delete-item-box\" key={'box-' + index}\r\n                                     onClick={this.deleteRoute.bind(null, pos)}>\r\n                                    <span key={'x-' + index} className=\"delete-item-btn\">X</span>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }) : 'No routes created'}\r\n                </MDBListGroup>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setAddressesCopy: data => dispatch(setAddressesCopy(data)),\r\n        setRoutes: data => dispatch(setRoutes(data))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        addressesCopy: state.map.addressesCopy,\r\n        routes: state.map.routes,\r\n        waypoints: state.map.waypoints\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(RoutesList);\r\n","import React, {Component} from \"react\";\r\nimport {MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport {setTravelMode} from \"../../../store/actions/mapAction\";\r\n\r\n/* global google */\r\n\r\nclass TravelMode extends Component {\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.props.setTravelMode(google.maps.DirectionsTravelMode.DRIVING);\r\n        }, 1000)\r\n    }\r\n\r\n    chooseTravelMode = event => {\r\n        switch (event.target.value) {\r\n            case 'DRIVING':\r\n                this.props.setTravelMode(google.maps.DirectionsTravelMode.DRIVING);\r\n                break;\r\n            case 'WALKING':\r\n                this.props.setTravelMode(google.maps.DirectionsTravelMode.WALKING);\r\n                break;\r\n            case 'TRANSIT':\r\n                this.props.setTravelMode(google.maps.DirectionsTravelMode.TRANSIT);\r\n                break;\r\n            case 'BICYCLING':\r\n                this.props.setTravelMode(google.maps.DirectionsTravelMode.BICYCLING);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <MDBDropdown size=\"sm\" style={{display: \"inline-flex\"}} onClick={this.chooseTravelMode}>\r\n                    <MDBDropdownToggle caret color=\"mdb-color\" defaultValue={this.props.travelMode}>Travel\r\n                        Mode</MDBDropdownToggle>\r\n                    <MDBDropdownMenu>\r\n                        <MDBDropdownItem value=\"DRIVING\">Driving</MDBDropdownItem>\r\n                        <MDBDropdownItem value=\"BICYCLING\">Bicycling</MDBDropdownItem>\r\n                        <MDBDropdownItem value=\"TRANSIT\">Transit</MDBDropdownItem>\r\n                        <MDBDropdownItem value=\"WALKING\">Walking</MDBDropdownItem>\r\n                    </MDBDropdownMenu>\r\n                </MDBDropdown>\r\n                <p>Travel mode: {this.props.travelMode.toLowerCase()}</p>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setTravelMode: data => dispatch(setTravelMode(data))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        travelMode: state.map.travelMode\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(TravelMode);\r\n","import React, {Component} from \"react\";\r\nimport {MDBBtn} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setAddresses,\r\n    setAddressesCopy,\r\n    setMarkers,\r\n    setRoutes,\r\n    setWaypoints\r\n} from \"../../../store/actions/mapAction\";\r\nimport {dismissAll, notify} from \"./ToastFunctions\";\r\n/* global google */\r\n\r\nclass CreateRouteButton extends Component {\r\n\r\n    deleteAllMarkers = () => {\r\n        this.props.polyline.setMap(null);\r\n        let markers = this.props.markers;\r\n        for (const item of markers) {\r\n            item.setMap(null);\r\n        }\r\n        markers = [];\r\n        this.props.setMarkers(markers);\r\n        this.props.setAddresses([]);\r\n    };\r\n    createRoute = () => {\r\n        dismissAll();\r\n        if (this.props.waypoints.length < 2) {\r\n            return;\r\n        }\r\n        let address = this.props.addresses;\r\n        let addressesCopy = this.props.addressesCopy;\r\n        addressesCopy.push({from: address[0], to: address[address.length - 1]});\r\n        let request;\r\n        let directionsService = new google.maps.DirectionsService();\r\n        let directionsDisplay = new google.maps.DirectionsRenderer();\r\n        directionsDisplay.setOptions({suppressMarkers: false});\r\n        directionsDisplay.setMap(this.props.google);\r\n        if (this.props.waypoints.length > 2) {\r\n            let waypts = this.props.waypoints;\r\n            let waypoints = [];\r\n            for (let item of waypts) {\r\n                waypoints.push({location: item, stopover: true});\r\n            }\r\n            waypoints.splice(0, 1);\r\n            waypoints.splice(waypoints.length - 1, 1);\r\n            request = {\r\n                origin: new google.maps.LatLng(this.props.waypoints[0]),\r\n                destination: new google.maps.LatLng(this.props.waypoints[this.props.waypoints.length - 1]),\r\n                waypoints: waypoints,\r\n                optimizeWaypoints: false,\r\n                travelMode: this.props.travelMode\r\n            };\r\n        } else {\r\n            request = {\r\n                origin: new google.maps.LatLng(this.props.waypoints[0]),\r\n                destination: new google.maps.LatLng(this.props.waypoints[this.props.waypoints.length - 1]),\r\n                optimizeWaypoints: false,\r\n                travelMode: this.props.travelMode\r\n            };\r\n        }\r\n        directionsService.route(request, (response, status) => {\r\n            if (status === window.google.maps.DirectionsStatus.OK) {\r\n                this.deleteAllMarkers();\r\n                directionsDisplay.setDirections(response);\r\n                notify('routeCreated');\r\n                directionsDisplay.setMap(this.props.google);\r\n                let routes = this.props.routes;\r\n                routes.push(directionsDisplay);\r\n                this.props.setWaypoints([]);\r\n                this.props.setRoutes(routes);\r\n                this.props.setAddressesCopy(addressesCopy);\r\n            } else {\r\n                notify('routeError');\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <MDBBtn size=\"sm\" onClick={this.createRoute}>Create Route</MDBBtn>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setWaypoints: data => dispatch(setWaypoints(data)),\r\n        setAddresses: data => dispatch(setAddresses(data)),\r\n        setMarkers: data => dispatch(setMarkers(data)),\r\n        setAddressesCopy: data => dispatch(setAddressesCopy(data)),\r\n        setRoutes: data => dispatch(setRoutes(data))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google,\r\n        waypoints: state.map.waypoints,\r\n        polyline: state.map.polyline,\r\n        markers: state.map.markers,\r\n        addresses: state.map.addresses,\r\n        addressesCopy: state.map.addressesCopy,\r\n        travelMode: state.map.travelMode,\r\n        routes: state.map.routes\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(CreateRouteButton);\r\n","import React from \"react\";\r\nimport {setEditeMode} from \"../../../store/actions/mapAction\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst EditToggle = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <input type=\"checkbox\"\r\n                   id=\"id-name--1\"\r\n                   name=\"edit-mode\"\r\n                   className=\"switch-input\"\r\n                   onChange={() => props.setEditMode(!props.editMode)}\r\n            />\r\n            <label htmlFor=\"id-name--1\" className=\"switch-label\">Edit mode\r\n                <span className=\"toggle--on\">On</span>\r\n                <span className=\"toggle--off\">Off</span>\r\n            </label>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setEditMode: data => dispatch(setEditeMode(data))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        editMode: state.map.editMode\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(EditToggle);\r\n","import React, {Component} from \"react\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport {MDBInput} from \"mdbreact\";\r\nimport {\r\n    setAddresses,\r\n    setMarkers,\r\n    setPolyline,\r\n    setValueFrom,\r\n    setWaypoints\r\n} from \"../../../store/actions/mapAction\";\r\nimport {connect} from \"react-redux\";\r\nimport {dismissAll, notify} from \"./ToastFunctions\";\r\n/* global google */\r\nclass AutoComplete extends Component {\r\n\r\n    setPoint = (latLng, address) => {\r\n        this.props.google.setCenter(latLng);\r\n        let waypoints = this.props.waypoints;\r\n        let polyline = this.props.polyline;\r\n        let markers = this.props.markers;\r\n        if (waypoints.length > 1) {\r\n            polyline.setMap(null);\r\n        }\r\n        waypoints.push(latLng);\r\n        let marker = new google.maps.Marker({\r\n            position: latLng,\r\n            map: this.props.google,\r\n            draggable: true,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        markers.push(marker);\r\n        polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.props.setWaypoints(waypoints);\r\n        this.props.setPolyline(polyline);\r\n        this.props.setMarkers(markers);\r\n        let infowindow = new google.maps.InfoWindow({\r\n            content: address\r\n        });\r\n        marker.addListener('click', () => {\r\n            infowindow.open(this.props.google, marker);\r\n        });\r\n        google.maps.event.addListener(marker, 'dragend', () => {\r\n            this.getNewAddress(marker, marker.getPosition());\r\n            setTimeout(() => {\r\n                infowindow.setContent(this.state.tempAddress);\r\n            }, 500);\r\n        });\r\n    };\r\n    getNewAddress = (marker, pos) => {\r\n        dismissAll();\r\n        let polyline = this.props.polyline;\r\n        polyline.setMap(null);\r\n        this.props.setPolyline(polyline);\r\n        let markers = this.props.markers;\r\n        let waypoints = this.props.waypoints;\r\n        let addresses = this.props.addresses;\r\n        let localPosition;\r\n        for (const [index, value] of markers.entries()) {\r\n            if (marker === value) {\r\n                localPosition = index;\r\n            }\r\n        }\r\n        let geocoder = new google.maps.Geocoder();\r\n        geocoder.geocode({latLng: pos}, (results, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    addresses[localPosition] = results[0].formatted_address;\r\n                    let localLatLng = {\r\n                        lat: results[0].geometry.location.lat(),\r\n                        lng: results[0].geometry.location.lng()\r\n                    };\r\n                    markers[localPosition] = marker;\r\n                    waypoints[localPosition] = localLatLng;\r\n                    this.props.setMarkers(markers);\r\n                    this.props.setAddresses(addresses);\r\n                    this.props.setWaypoints(waypoints);\r\n                    this.setState({\r\n                        tempAddress: results[0].formatted_address\r\n                    })\r\n                } else {\r\n                    notify('pointError');\r\n                    markers[localPosition].setPosition(waypoints[localPosition]);\r\n                    this.props.setMarkers(markers);\r\n                }\r\n            }\r\n        );\r\n        setTimeout(() => {\r\n            this.recreatePoly();\r\n        }, 500);\r\n    };\r\n    setMarker = (latLng, address) => {\r\n        if (latLng) {\r\n            notify('pointCreated');\r\n            this.setPoint(latLng, address)\r\n        } else {\r\n            notify('placeError');\r\n        }\r\n    };\r\n    handleSelect = address => {\r\n        dismissAll();\r\n        let addresses = this.props.addresses;\r\n        geocodeByAddress(address)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng => {\r\n                addresses.push(address);\r\n                this.props.setValueFrom('');\r\n                this.props.setAddresses(addresses);\r\n                this.setMarker(latLng, address);\r\n            })\r\n            .catch(() => {\r\n                this.setMarker();\r\n            });\r\n    };\r\n    onError = (status, clearSuggestions) => {\r\n        dismissAll();\r\n        notify('noResults');\r\n        clearSuggestions();\r\n    };\r\n    recreatePoly = () => {\r\n        let waypoints = this.props.waypoints;\r\n        let polyline = new google.maps.Polyline({\r\n            path: waypoints,\r\n            geodesic: true,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 2\r\n        });\r\n        polyline.setMap(this.props.google);\r\n        this.props.setWaypoints(waypoints);\r\n        this.props.setPolyline(polyline);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <PlacesAutocomplete\r\n                value={this.props.valueFrom}\r\n                onChange={valueFrom => this.props.setValueFrom(valueFrom)}\r\n                onSelect={this.handleSelect}\r\n                onError={this.onError}\r\n            >\r\n                {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\r\n                    <div>\r\n                        <MDBInput\r\n                            hint=\"Add waypoint\"\r\n                            id=\"from_value\"\r\n                            name=\"valueFrom\"\r\n                            {...getInputProps({\r\n                                placeholder: 'Search Places ...',\r\n                                className: 'location-search-input',\r\n                            })}\r\n                        />\r\n                        <div className=\"autocomplete-dropdown-container\">\r\n                            {loading && <div className=\"spinner-grow text-info\" role=\"status\"></div>}\r\n                            {suggestions.map(suggestion => {\r\n                                const className = suggestion.active\r\n                                    ? 'suggestion-item--active'\r\n                                    : 'suggestion-item';\r\n                                const style = suggestion.active\r\n                                    ? {backgroundColor: '#fafafa', cursor: 'pointer'}\r\n                                    : {backgroundColor: '#ffffff', cursor: 'pointer'};\r\n                                return (\r\n                                    <div\r\n                                        {...getSuggestionItemProps(suggestion, {\r\n                                            className,\r\n                                            style,\r\n                                        })}\r\n                                    >\r\n                                        <span>{suggestion.description}</span>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </PlacesAutocomplete>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setWaypoints: data => dispatch(setWaypoints(data)),\r\n        setAddresses: data => dispatch(setAddresses(data)),\r\n        setMarkers: data => dispatch(setMarkers(data)),\r\n        setPolyline: data => dispatch(setPolyline(data)),\r\n        setValueFrom: data => dispatch(setValueFrom(data))\r\n    };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google,\r\n        waypoints: state.map.waypoints,\r\n        polyline: state.map.polyline,\r\n        markers: state.map.markers,\r\n        addresses: state.map.addresses,\r\n        valueFrom: state.map.valueFrom\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(AutoComplete);\r\n","import React, {Component} from 'react';\r\nimport {\r\n    MDBCardText\r\n} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport Wrapper from \"../Wrapper/Wrapper\";\r\nimport WaypointsList from \"./OptionsComponents/WaypointsList\";\r\nimport RoutesList from \"./OptionsComponents/RoutesList\";\r\nimport TravelMode from \"./OptionsComponents/TravelMode\";\r\nimport CreateRouteButton from \"./OptionsComponents/CreateRouteButton\";\r\nimport EditToggle from \"./OptionsComponents/EditToggle\";\r\nimport AutoComplete from \"./OptionsComponents/AutoComplete\";\r\n\r\nclass Options extends Component {\r\n    state = {\r\n        loaded: false\r\n    };\r\n    componentDidUpdate() {\r\n        if (this.state.loaded === false) {\r\n            this.setState({\r\n                loaded: true\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Wrapper title=\"Settings\" size=\"12\" className={this.props.wrapperCss}\r\n                     cardClassname={this.props.toggleOptionsCss}>\r\n                <MDBCardText>\r\n                    You can choose variant with arrows and press Enter to add a waypoint.\r\n                </MDBCardText>\r\n                {this.props.google ? <AutoComplete/> : false}\r\n                <div className=\"options\">\r\n                    <CreateRouteButton/>\r\n                    <EditToggle/>\r\n                    <TravelMode/>\r\n                </div>\r\n                <WaypointsList/>\r\n                <RoutesList/>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google,\r\n        toggleOptionsCss: state.map.toggleOptionsCss,\r\n        wrapperCss: state.map.wrapperCss\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    null)(Options);\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport GoogleMap from './Components/Map/Map'\r\nimport {\r\n    MDBRow,\r\n    MDBContainer,\r\n    ToastContainer,\r\n} from \"mdbreact\";\r\nimport {connect} from \"react-redux\";\r\nimport NavBar from \"./Components/NavBar/NavBar\";\r\nimport Options from \"./Components/Options/Options\";\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                {!this.props.google ? <div className=\"preloader\">\r\n                    <div className=\"spinner-grow text-info\" role=\"status\"></div>\r\n                </div> : false}\r\n                <NavBar/>\r\n                <MDBContainer fluid>\r\n                    <ToastContainer\r\n                        className=\"toaster\"\r\n                        hideProgressBar={true}\r\n                        newestOnTop={true}\r\n                        autoClose={5000}\r\n                    />\r\n                    <MDBRow around>\r\n                        <Options/>\r\n                        <GoogleMap/>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        google: state.map.google\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import {\r\n    GOOGLE_API,\r\n    TOGGLE_OPTIONS_CSS,\r\n    WRAPPER_CSS,\r\n    WAYPOINTS,\r\n    POLYLINE,\r\n    MARKERS,\r\n    ADDRESSES,\r\n    ADDRESSES_COPY,\r\n    TRAVEL_MODE,\r\n    ROUTES, VALUE_FROM, EDIT_MODE\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    google: '',\r\n    waypoints: [],\r\n    polyline: [],\r\n    markers: [],\r\n    addresses: [],\r\n    editMode: true,\r\n    valueFrom: '',\r\n    routes: [],\r\n    tempAddress: '',\r\n    addressesCopy: [],\r\n    toggleOptionsCss: 'd-none',\r\n    wrapperCss: 'settings-wrapper z0',\r\n    travelMode: '',\r\n    travelModeDefault: false\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case EDIT_MODE:\r\n            return{\r\n                ...state,\r\n                editMode: action.mode\r\n            };\r\n        case VALUE_FROM:\r\n            return {\r\n                ...state,\r\n                valueFrom: action.value\r\n            };\r\n        case ROUTES:\r\n            return {\r\n                ...state,\r\n                routes: action.routes\r\n            };\r\n        case TRAVEL_MODE:\r\n            return {\r\n                ...state,\r\n                travelMode: action.mode\r\n            };\r\n        case POLYLINE:\r\n            return {\r\n                ...state,\r\n                polyline: action.poly\r\n            };\r\n        case MARKERS:\r\n            return {\r\n                ...state,\r\n                markers: action.markers\r\n            };\r\n        case ADDRESSES:\r\n            return {\r\n                ...state,\r\n                addresses: action.addresses\r\n            };\r\n        case ADDRESSES_COPY:\r\n            return {\r\n                ...state,\r\n                addressesCopy: action.addresses\r\n            };\r\n        case WAYPOINTS:\r\n            return {\r\n                ...state,\r\n                waypoints: action.waypoints\r\n            };\r\n        case TOGGLE_OPTIONS_CSS:\r\n            return {\r\n                ...state,\r\n                toggleOptionsCss: action.css\r\n            };\r\n        case WRAPPER_CSS:\r\n            return {\r\n                ...state,\r\n                wrapperCss: action.css\r\n            };\r\n        case GOOGLE_API:\r\n            return {\r\n                ...state,\r\n                google: action.google\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from 'redux'\r\nimport mapReducer from './mapReducer'\r\n\r\nexport default combineReducers({\r\n    map: mapReducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport App from './App';\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport rootReducer from './store/reducers/rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);\r\nconst application = (\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n)\r\nReactDOM.render(application, document.getElementById('root'));\r\n"],"sourceRoot":""}